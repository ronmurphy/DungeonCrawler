<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<!-- iOS specific -->
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<meta name="apple-mobile-web-app-title" content="DCC Sheet">

<!-- Disable unwanted auto-formatting -->
<meta name="format-detection" content="telephone=no">
<meta name="msapplication-tap-highlight" content="no">

<!-- PWA Manifest -->
<link rel="manifest" href="manifest.json">
<meta name="theme-color" content="#ff6b35">

<!-- iOS icons (Apple doesn‚Äôt use manifest.json icons) -->
<link rel="apple-touch-icon" sizes="180x180" href="icon-192.png">
<link rel="apple-touch-icon" sizes="512x512" href="icon-512.png">

<!-- Optional splash screens for iOS (if you want fancy loading) -->
<!-- Example -->
<!-- <link rel="apple-touch-startup-image" href="splash-640x1136.png" media="(device-width: 320px)"> -->

<title>Dungeon Crawler World</title>

    <!-- Fonts - Original Google Fonts setup that was working -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Uncial+Antiqua&family=Merriweather:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/rpg-awesome/0.2.0/css/rpg-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/line-awesome/1.3.0/line-awesome/css/line-awesome.min.css">
    <!-- Add Montserrat font for modern look -->
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,500,700&display=swap" rel="stylesheet">
    
    <style>
        /* Original working font setup */
        body {
            font-family: 'Cinzel', 'Times New Roman', 'Georgia', serif;
        }
        
        /* Headers get the refined fantasy treatment */
        h1, h2, h3, h4, h5, h6 {
            font-family: 'Montserrat', 'Merriweather', 'Cinzel', serif;
        }
        
        /* Special elements for that ancient manuscript feel */
        .app-title, .hero-name-input, .character-landing h1 {
            font-family: 'Montserrat', Arial, serif;
        }
        
        /* Material Icons - original setup */
        .material-icons {
            font-family: 'Material Icons';
            font-weight: normal;
            font-style: normal;
            font-size: 24px;
            line-height: 1;
            letter-spacing: normal;
            text-transform: none;
            display: inline-block;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            -webkit-font-feature-settings: 'liga';
            font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
        }
        
        /* RPG Awesome icons work with CSS file colors */

        

        .ra:empty.ra-double-team:after { content: "ÔøΩ"; }
        .ra:empty.ra-muscle-up:after { content: "ÔøΩ"; }
        .ra:empty.ra-hearts:after { content: "‚ù§Ô∏è"; }
        .ra:empty.ra-crystal-wand:after { content: "üîÆ"; }
        .ra:empty.ra-sword:after { content: "‚öîÔ∏è"; }
        .ra:empty.ra-shield:after { content: "üõ°Ô∏è"; }
        .ra:empty.ra-vest:after { content: "üëï"; }
        .ra:empty.ra-gem-pendant:after { content: "üíé"; }
        .ra:empty.ra-backpack:after { content: "üéí"; }
        
        /* Enhanced font loading detection */
        @media screen and (max-width: 768px) {
            /* Mobile-specific font adjustments */
            body {
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }
        }
        
        /* Fix any remaining emoji fallback issues */
        .ra:empty:after {
            display: none !important;
        }
        
        .material-icons:empty:after {
            display: none !important;
        }
        
        /* Chat button styles for character cards */
        .card-action-btn.chat-btn {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            border: none;
            width: 32px;
            height: 32px;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 16px;
            margin: 0 2px;
            line-height: 1;
            padding: 0;
            min-height: 32px;
            max-height: 32px;
        }
        
        .card-action-btn.chat-btn:hover {
            background: linear-gradient(135deg, #45a049, #3d8b40);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        }
        
        .card-action-btn.chat-btn:active {
            transform: translateY(0);
        }
    </style>

    <!-- Custom CSS -->
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="light.css">
    <link rel="stylesheet" href="dark.css">
    <link rel="stylesheet" href="themes.css">
    <!-- Network Integration CSS -->
    <link rel="stylesheet" href="css/network-chat.css">
    <link rel="stylesheet" href="css/enhanced_chat_effects.css">
    <link rel="stylesheet" href="css/fab-system.css">
</head>

<body>
    <!-- Main Character Sheet (Initially hidden by JS) -->
    <div class="app-container">
        <!-- Mobile Header -->
        <header class="app-header">
            <!-- Disabled for Feral Gateway system
            <button class="header-btn menu-btn" onclick="toggleSidebar()" title="Open Navigation Menu">
                <span class="material-icons">menu</span>
            </button>
            -->
            <button class="header-btn theme-btn" onclick="toggleTheme()" title="Toggle Theme">
                <span class="material-icons">brightness_6</span>
            </button>
            <button class="header-btn cache-btn" onclick="clearAllCaches()" title="Clear Cache (Fix Loading Issues)">
                <span class="material-icons">refresh</span>
            </button>
            <h1 class="app-title">
                <span class="character-info-display"></span>
                <div class="status-header-container" id="status-header-container">
                    <!-- Active status effects with timers will appear here -->
                </div>
            </h1>
            <button class="header-btn trophy-btn" onclick="showAchievementsModal()" title="View Achievements">
                <span class="material-icons">emoji_events</span>
            </button>
            <!-- Roll History moved to Chat Bottom Sheet
            <button class="header-btn roll-history-btn" onclick="showRollHistoryModal()" title="View Roll History">
                <i class="ra ra-perspective-dice-six"></i>
            </button>
            -->
            <button class="header-btn status-effects-btn" onclick="showStatusEffectsModal()" title="View Status Effects">
                <i class="ra ra-biohazard"></i>
            </button>
            <button class="header-btn save-btn" onclick="saveCharacterToStorage()" title="Save Character">
                <span class="material-icons">save</span>
            </button>
        </header>

        <!-- Map Display Overlay (shows above everything when map arrives) -->
        <div id="map-overlay" style="
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            display: none;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(5px);
        ">
            <div id="map-viewer-container" style="
                width: 90vw;
                height: 80vh;
                max-width: 800px;
                max-height: 600px;
                background: var(--surface-color);
                border-radius: 12px;
                border: 2px solid var(--border-color);
                position: relative;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            ">
                <div style="
                    position: absolute;
                    top: 10px;
                    right: 10px;
                    z-index: 1001;
                ">
                    <button onclick="hideMapOverlay()" style="
                        background: rgba(255, 255, 255, 0.2);
                        border: 1px solid var(--border-color);
                        color: var(--text-color);
                        border-radius: 50%;
                        width: 32px;
                        height: 32px;
                        cursor: pointer;
                        font-size: 18px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    " title="Close Map">√ó</button>
                </div>
                <canvas id="map-canvas" style="
                    width: 100%;
                    height: 100%;
                    border: none;
                    border-radius: 10px;
                "></canvas>
            </div>
        </div>

        <!-- Map Display Area (for real-time map sharing) - DEPRECATED, using overlay instead -->
        <div id="map-display" style="display: none;">
            <!-- Kept for compatibility -->
        </div>

        <!-- Sidebar Navigation Drawer -->
        <nav class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2>Navigation</h2>
                <button class="close-sidebar" onclick="toggleSidebar()" title="Close Menu">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="sidebar-content">
                <button class="sidebar-tab" data-tab="creation" style="display: none;">
                    <span class="tab-icon"><i class="ra ra-quill-ink"></i></span>
                    <span class="tab-label">Create Character</span>
                </button>
                <button class="sidebar-tab active" data-tab="character">
                    <span class="tab-icon"><i class="ra ra-player"></i></span>
                    <span class="tab-label">Character Stats</span>
                </button>
                <button class="sidebar-tab" data-tab="inventory">
                    <span class="tab-icon"><i class="ra ra-book"></i></span>
                    <span class="tab-label">Inventory & Gear</span>
                </button>
                <button class="sidebar-tab" data-tab="magic">
                    <span class="tab-icon"><i class="ra ra-fairy-wand"></i></span>
                    <span class="tab-label">Magic & Spells</span>
                </button>
                <!-- Chat Tab Removed - Now using FAB + Bottom Sheet -->
                <!-- <button class="sidebar-tab" data-tab="chat">
                    <span class="tab-icon"><i class="ra ra-conversation"></i></span>
                    <span class="tab-label">Game Chat</span>
                </button> -->
                <!-- <button class="sidebar-tab" data-tab="combat">
                    <span class="tab-icon"><i class="ra ra-crossed-swords"></i></span>
                    <span class="tab-label">Combat & Dice</span>
                </button> -->
                <button class="sidebar-tab" data-tab="notes">
                    <span class="tab-icon"><i class="ra ra-scroll-unfurled"></i></span>
                    <span class="tab-label">Notes & Backstory</span>
                </button>
                <button class="sidebar-tab" data-tab="storage">
                    <span class="tab-icon">üóÑÔ∏è</span>
                    <span class="tab-label">Storage Manager</span>
                </button>
                <button class="sidebar-tab" data-tab="reference">
                    <span class="tab-icon"><i class="material-icons">help_outline</i></span>
                    <span class="tab-label">How the Game Works</span>
                </button>
            </div>
            
            <!-- Theme Selector -->
            <div class="theme-selector">
                <h4>Accent Colors</h4>
                <div class="theme-colors-grid">
                    <button class="theme-color-btn theme-btn-default active" data-theme="default" title="Default (Purple)"></button>
                    <button class="theme-color-btn theme-btn-red" data-theme="red" title="Red"></button>
                    <button class="theme-color-btn theme-btn-orange" data-theme="orange" title="Orange"></button>
                    <button class="theme-color-btn theme-btn-yellow" data-theme="yellow" title="Yellow"></button>
                    <button class="theme-color-btn theme-btn-green" data-theme="green" title="Green"></button>
                    <button class="theme-color-btn theme-btn-blue" data-theme="blue" title="Blue"></button>
                    <button class="theme-color-btn theme-btn-indigo" data-theme="indigo" title="Indigo"></button>
                    <button class="theme-color-btn theme-btn-violet" data-theme="violet" title="Violet"></button>
                </div>
                
                <div class="holiday-themes">
                    <h5>Special Themes</h5>
                    <div class="theme-colors-grid">
                        <button class="theme-color-btn theme-btn-christmas" data-theme="christmas" title="Christmas"></button>
                        <button class="theme-color-btn theme-btn-halloween" data-theme="halloween" title="Halloween"></button>
                        <button class="theme-color-btn theme-btn-valentine" data-theme="valentine" title="Valentine's Day"></button>
                        <button class="theme-color-btn theme-btn-ocean" data-theme="ocean" title="Ocean"></button>
                        <button class="theme-color-btn theme-btn-forest" data-theme="forest" title="Forest"></button>
                        <button class="theme-color-btn theme-btn-sunset" data-theme="sunset" title="Sunset"></button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Sidebar Overlay for Mobile -->
        <!-- Disabled for Feral Gateway system
        <div class="sidebar-overlay" id="sidebar-overlay" onclick="toggleSidebar()"></div>
        -->

        <!-- Tab Contents -->
        <main class="tab-container">
            <!-- Character Creation Tab -->
            <section class="tab-content active" id="creation">
                <div class="content-wrapper">
                    <!-- Hero Section -->
                    <div class="hero-card">
                        <div class="portrait-section">
                            <div id="portrait-display" class="portrait-container">
                                <div class="portrait-placeholder">
                                    <i class="ra ra-hood"></i>
                                    <span>Tap to Upload</span>
                                </div>
                            </div>
                            <input type="file" id="portrait-upload" accept="image/*" style="display: none;">
                        </div>

                        <div class="hero-info">
                            <input type="text" id="char-name" class="hero-name-input" placeholder="Character Name"
                                autocomplete="off">
                            <div class="hero-meta">
                                <div class="meta-item">
                                    <label>Level</label>
                                    <input type="number" id="char-level" class="compact-input" value="1" min="1"
                                        max="20">
                                </div>
                                <div class="meta-item">
                                    <label>Age</label>
                                    <input type="number" id="char-age" class="compact-input" placeholder="25" min="0">
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Identity Cards -->
                    <div class="card-grid">
                        <!-- Race Card -->
                        <div class="card race-card">
                            <div class="card-header">
                                <i class="ra ra-double-team"></i>
                                <h3>Heritage</h3>
                            </div>
                            <select id="race-select" class="fancy-select" onchange="handleHeritageSelection()">
                                <option value="">Choose your heritage...</option>
                                <optgroup label="Dungeon Crawler">
                                    <option value="bopca">üõ∏ Bopca</option>
                                    <option value="skyfowl">ü¶Ö Skyfowl</option>
                                    <option value="rat_kin">üêÄ Rat-kin</option>
                                    <option value="hellspawn_familiar">üëπ Hellspawn Familiar</option>
                                    <option value="primal">‚ú® Primal</option>
                                    <option value="were_creature">üê∫ Were-creature</option>
                                </optgroup>
                                <optgroup label="Classic Fantasy">
                                    <option value="human">üë§ Human</option>
                                    <option value="elf">üßù Elf</option>
                                    <option value="dwarf">‚õèÔ∏è Dwarf</option>
                                    <option value="orc">üí™ Orc</option>
                                    <option value="halfling">üçÑ Halfling</option>
                                    <option value="dragonborn">üê≤ Dragonborn</option>
                                    <option value="tiefling">üòà Tiefling</option>
                                    <option value="gnome">üßô Gnome</option>
                                    <option value="goblin">üë∫ Goblin</option>
                                    <option value="slime">üíß Slime</option>
                                </optgroup>
                                <optgroup label="Sci-Fi">
                                    <option value="cyborg">ü§ñ Cyborg</option>
                                    <option value="mutant">‚ò¢Ô∏è Mutant</option>
                                    <option value="android">ü¶æ Android</option>
                                    <option value="clone">üß¨ Clone</option>
                                </optgroup>
                                <optgroup label="Post-Apocalyptic">
                                    <option value="ghoul">‚ò†Ô∏è Ghoul</option>
                                    <option value="raider">‚öîÔ∏è Raider</option>
                                    <option value="vault_dweller">üè† Vault Dweller</option>
                                    <option value="synth">üîß Synth</option>
                                    <option value="beast_kin">üê∫ Beast-kin</option>
                                    <option value="plant_hybrid">üåø Plant Hybrid</option>
                                </optgroup>
                                <option value="custom">‚ú® Custom Heritage</option>
                            </select>

                            <input type="text" id="custom-race" class="fancy-input" placeholder="Enter custom heritage"
                                style="display: none;">

                            <!-- Custom Race Builder -->
                            <div id="custom-race-bonuses" class="custom-builder" style="display: none;">
                                <h4>Custom Heritage Builder</h4>

                                <div class="builder-section">
                                    <label>Attribute Bonuses (Pick 1-2)</label>
                                    <div class="checkbox-grid">
                                        <label class="checkbox-pill">
                                            <input type="checkbox" id="custom-race-str"
                                                onchange="updateCustomRaceBonuses()">
                                            <span>STR</span>
                                        </label>
                                        <label class="checkbox-pill">
                                            <input type="checkbox" id="custom-race-dex"
                                                onchange="updateCustomRaceBonuses()">
                                            <span>DEX</span>
                                        </label>
                                        <label class="checkbox-pill">
                                            <input type="checkbox" id="custom-race-con"
                                                onchange="updateCustomRaceBonuses()">
                                            <span>CON</span>
                                        </label>
                                        <label class="checkbox-pill">
                                            <input type="checkbox" id="custom-race-int"
                                                onchange="updateCustomRaceBonuses()">
                                            <span>INT</span>
                                        </label>
                                        <label class="checkbox-pill">
                                            <input type="checkbox" id="custom-race-wis"
                                                onchange="updateCustomRaceBonuses()">
                                            <span>WIS</span>
                                        </label>
                                        <label class="checkbox-pill">
                                            <input type="checkbox" id="custom-race-cha"
                                                onchange="updateCustomRaceBonuses()">
                                            <span>CHA</span>
                                        </label>
                                    </div>
                                </div>

                                <div class="builder-section">
                                    <label>Attribute Limits</label>
                                    <div class="stat-limit-grid">
                                        <div class="limit-input">
                                            <label>STR</label>
                                            <input type="number" id="custom-race-max-str" value="15" min="5" max="25">
                                        </div>
                                        <div class="limit-input">
                                            <label>DEX</label>
                                            <input type="number" id="custom-race-max-dex" value="15" min="5" max="25">
                                        </div>
                                        <div class="limit-input">
                                            <label>CON</label>
                                            <input type="number" id="custom-race-max-con" value="15" min="5" max="25">
                                        </div>
                                        <div class="limit-input">
                                            <label>INT</label>
                                            <input type="number" id="custom-race-max-int" value="15" min="5" max="25">
                                        </div>
                                        <div class="limit-input">
                                            <label>WIS</label>
                                            <input type="number" id="custom-race-max-wis" value="15" min="5" max="25">
                                        </div>
                                        <div class="limit-input">
                                            <label>CHA</label>
                                            <input type="number" id="custom-race-max-cha" value="15" min="5" max="25">
                                        </div>
                                    </div>
                                </div>

                                <div class="builder-section">
                                    <label>Racial Abilities</label>
                                    <div class="skill-builder">
                                        <select id="custom-race-skill1" class="skill-select">
                                            <option value="">First ability...</option>
                                            <option value="custom">‚úèÔ∏è Custom</option>
                                            <option value="Darkvision">üëÅÔ∏è Darkvision</option>
                                            <option value="Flight">ü¶Ö Flight</option>
                                            <option value="Telepathy">üß† Telepathy</option>
                                            <option value="Regeneration">‚ù§Ô∏è‚Äçü©π Regeneration</option>
                                            <option value="Natural Armor">üõ°Ô∏è Natural Armor</option>
                                            <option value="Keen Senses">üëÇ Keen Senses</option>
                                            <option value="Camouflage">üåø Camouflage</option>
                                            <option value="Aquatic">üåä Aquatic</option>
                                        </select>
                                        <select id="custom-race-skill1-stat" class="stat-select">
                                            <option value="strength">STR</option>
                                            <option value="dexterity">DEX</option>
                                            <option value="constitution">CON</option>
                                            <option value="intelligence">INT</option>
                                            <option value="wisdom">WIS</option>
                                            <option value="charisma">CHA</option>
                                        </select>
                                        <input type="text" id="custom-race-skill1-name" class="custom-skill-name"
                                            placeholder="Ability name" style="display: none;">
                                    </div>

                                    <div class="skill-builder">
                                        <select id="custom-race-skill2" class="skill-select">
                                            <option value="">Second ability...</option>
                                            <option value="custom">‚úèÔ∏è Custom</option>
                                            <option value="Darkvision">üëÅÔ∏è Darkvision</option>
                                            <option value="Flight">ü¶Ö Flight</option>
                                            <option value="Telepathy">üß† Telepathy</option>
                                            <option value="Regeneration">‚ù§Ô∏è‚Äçü©π Regeneration</option>
                                            <option value="Natural Armor">üõ°Ô∏è Natural Armor</option>
                                            <option value="Keen Senses">üëÇ Keen Senses</option>
                                            <option value="Camouflage">üåø Camouflage</option>
                                            <option value="Aquatic">üåä Aquatic</option>
                                        </select>
                                        <select id="custom-race-skill2-stat" class="stat-select">
                                            <option value="strength">STR</option>
                                            <option value="dexterity">DEX</option>
                                            <option value="constitution">CON</option>
                                            <option value="intelligence">INT</option>
                                            <option value="wisdom">WIS</option>
                                            <option value="charisma">CHA</option>
                                        </select>
                                        <input type="text" id="custom-race-skill2-name" class="custom-skill-name"
                                            placeholder="Ability name" style="display: none;">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Background Card -->
                        <div class="card background-card">
                            <div class="card-header">
                                <i class="ra ra-scroll-unfurled"></i>
                                <h3>Background</h3>
                            </div>
                            <select id="job-select" class="fancy-select">
                                <option value="">Choose your past...</option>
                                <optgroup label="Academic">
                                    <option value="teacher">üìö Teacher</option>
                                    <option value="scientist">üî¨ Scientist</option>
                                    <option value="doctor">‚öïÔ∏è Doctor</option>
                                    <option value="lawyer">‚öñÔ∏è Lawyer</option>
                                </optgroup>
                                <optgroup label="Technical">
                                    <option value="engineer">‚öôÔ∏è Engineer</option>
                                    <option value="mechanic">üîß Mechanic</option>
                                    <option value="programmer">üíª Programmer</option>
                                </optgroup>
                                <optgroup label="Service">
                                    <option value="soldier">üéñÔ∏è Soldier</option>
                                    <option value="police">üëÆ Police Officer</option>
                                    <option value="firefighter">üöí Firefighter</option>
                                </optgroup>
                                <optgroup label="Creative">
                                    <option value="artist">üé® Artist</option>
                                    <option value="musician">üéµ Musician</option>
                                    <option value="writer">‚úçÔ∏è Writer</option>
                                    <option value="chef">üë®‚Äçüç≥ Chef</option>
                                </optgroup>
                                <optgroup label="Physical">
                                    <option value="athlete">üèÉ Athlete</option>
                                </optgroup>
                                <option value="custom">‚ú® Custom Background</option>
                            </select>

                            <input type="text" id="custom-job" class="fancy-input" placeholder="Enter custom background"
                                style="display: none;">

                            <!-- Custom Job Builder (similar structure) -->
                            <div id="custom-job-bonuses" class="custom-builder" style="display: none;">
                                <!-- Similar to race builder but for jobs -->
                            </div>
                        </div>

                        <!-- Class Card -->
                        <div class="card class-card">
                            <div class="card-header">
                                <i class="ra ra-crossed-swords"></i>
                                <h3>Class</h3>
                            </div>
                            <select id="class-select" class="fancy-select">
                                <option value="">Choose your path...</option>
                                <optgroup label="Dungeon Crawler">
                                    <option value="compensated_anarchist">üí• Compensated Anarchist</option>
                                    <option value="bomb_squad_tech">üí£ Bomb Squad Tech</option>
                                    <option value="prizefighter">üëä Prizefighter</option>
                                    <option value="artist_alley_mogul">üé® Artist Alley Mogul</option>
                                    <option value="former_child_actor">üé≠ Former Child Actor</option>
                                    <option value="roller_derby_jammer">üõº Roller Derby Jammer</option>
                                    <option value="football_hooligan">‚öΩ Football Hooligan</option>
                                    <option value="kabaddi_raider">ü§º Kabaddi Raider</option>
                                    <option value="monster_truck_driver">üöö Monster Truck Driver</option>
                                    <option value="vape_shop_counter_jockey">üí® Vape Shop Counter Jockey</option>
                                    <option value="freelance_psychiatrist">üß† Freelance Psychiatrist</option>
                                    <option value="banana_farmer">üçå Banana Farmer</option>
                                    <option value="necrobard">üíÄ NecroBard</option>
                                    <option value="feral_cat_berserker">üê± Feral Cat Berserker</option>
                                    <option value="animal_test_subject">üß™ Animal Test Subject</option>
                                    <option value="glass_cannon">üîÆ Glass Cannon</option>
                                    <option value="legendary_diva">üëë Legendary Diva</option>
                                    <option value="viper_queen">üêç Viper Queen</option>
                                </optgroup>
                                <optgroup label="Warriors">
                                    <option value="fighter">‚öîÔ∏è Fighter</option>
                                    <option value="barbarian">ü™ì Barbarian</option>
                                    <option value="paladin">üõ°Ô∏è Paladin</option>
                                    <option value="monk">ü•ã Monk</option>
                                </optgroup>
                                <optgroup label="Rogues">
                                    <option value="rogue">üó°Ô∏è Rogue</option>
                                    <option value="ranger">üèπ Ranger</option>
                                    <option value="gunslinger">üî´ Gunslinger</option>
                                </optgroup>
                                <optgroup label="Mages">
                                    <option value="wizard">üßô Wizard</option>
                                    <option value="sorcerer">‚ú® Sorcerer</option>
                                    <option value="warlock">üëπ Warlock</option>
                                    <option value="druid">üå≥ Druid</option>
                                </optgroup>
                                <optgroup label="Support">
                                    <option value="cleric">‚õ™ Cleric</option>
                                    <option value="bard">üé≠ Bard</option>
                                    <option value="medic">üè• Field Medic</option>
                                </optgroup>
                                <optgroup label="Tech">
                                    <option value="hacker">üíæ Data Runner</option>
                                    <option value="engineer_class">üî® Engineer</option>
                                    <option value="pilot">‚úàÔ∏è Pilot</option>
                                </optgroup>
                                <optgroup label="Survival">
                                    <option value="survivalist">üèïÔ∏è Survivalist</option>
                                </optgroup>
                                <option value="custom_class">‚ú® Custom Class</option>
                            </select>

                            <input type="text" id="custom-class" class="fancy-input" placeholder="Enter custom class"
                                style="display: none;">

                            <!-- Custom Class Builder (similar structure) -->
                            <div id="custom-class-bonuses" class="custom-builder" style="display: none;">
                                <!-- Similar to race builder but for classes -->
                            </div>
                        </div>
                    </div>

                    <!-- Active Bonuses -->
                    <div class="card bonuses-card" id="bonuses-display" style="display: none;">
                        <div class="card-header">
                            <i class="ra ra-trophy"></i>
                            <h3>Active Bonuses</h3>
                        </div>
                        <div id="bonuses-content" class="bonuses-list">
                            <!-- Bonuses will be rendered here -->
                        </div>
                    </div>

                    <!-- Attributes Section -->
                    <div class="card attributes-card">
                        <div class="card-header">
                            <i class="ra ra-muscle-up"></i>
                            <h3>Attributes</h3>
                            <div class="points-display">
                                <span class="points-label">Points</span>
                                <span class="points-value" id="available-points">3</span>
                            </div>
                        </div>

                        <div class="attributes-grid" id="stats-grid">
                            <!-- Stats will be rendered here -->
                        </div>

                        <div class="vital-stats">
                            <div class="vital-stat hp-stat">
                                <i class="ra ra-hearts"></i>
                                <div class="vital-info">
                                    <span class="vital-label">Health</span>
                                    <span class="vital-value" id="health-points">3</span>
                                </div>
                            </div>
                            <div class="vital-stat mp-stat">
                                <i class="ra ra-crystal-wand"></i>
                                <div class="vital-info">
                                    <span class="vital-label">Magic</span>
                                    <span class="vital-value" id="magic-points">4</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Story Section -->
                    <div class="card story-card">
                        <div class="card-header">
                            <i class="ra ra-book"></i>
                            <h3>Character Story</h3>
                        </div>
                        <textarea id="char-backstory" class="story-textarea"
                            placeholder="Tell your character's story..." rows="6"></textarea>
                    </div>

                    <!-- Skills Selection Section -->
                    <div class="card skills-selection-card">
                        <div class="card-header">
                            <i class="ra ra-gears"></i>
                            <h3>Starting Skills</h3>
                            <div class="skills-counter">
                                <span class="skills-label">Selected</span>
                                <span class="skills-value" id="selected-skills-count">0</span>
                                <span class="skills-max">/5</span>
                            </div>
                        </div>
                        <p class="hint-text">Choose up to 5 skills from the list below, or create your own custom skills. Skills based on your class and job attributes get bonus dice!</p>
                        
                        <div class="skills-tabs">
                            <button class="skills-tab-btn active" data-skills-tab="existing">
                                <i class="ra ra-book"></i>
                                Existing Skills
                            </button>
                            <button class="skills-tab-btn" data-skills-tab="custom">
                                <i class="ra ra-quill-ink"></i>
                                Custom Skills
                            </button>
                        </div>

                        <!-- Existing Skills Tab -->
                        <div class="skills-tab-content active" id="existing-skills-tab">
                            <div class="skills-filter">
                                <select id="skills-filter-stat" class="filter-select">
                                    <option value="">Filter by attribute...</option>
                                    <option value="strength">Strength</option>
                                    <option value="dexterity">Dexterity</option>
                                    <option value="constitution">Constitution</option>
                                    <option value="intelligence">Intelligence</option>
                                    <option value="wisdom">Wisdom</option>
                                    <option value="charisma">Charisma</option>
                                </select>
                                <input type="text" id="skills-search" class="search-input" placeholder="Search skills...">
                            </div>
                            <div class="skills-selection-grid" id="skills-selection-grid">
                                <!-- Available skills will be rendered here -->
                            </div>
                        </div>

                        <!-- Custom Skills Tab -->
                        <div class="skills-tab-content" id="custom-skills-tab">
                            <div class="custom-skills-creator">
                                <h4>Create Custom Skills</h4>
                                <div class="custom-skill-form">
                                    <input type="text" id="custom-skill-name" class="skill-name-input" 
                                           placeholder="Skill name (e.g., 'Spaceship Piloting')">
                                    <select id="custom-skill-stat" class="skill-stat-select">
                                        <option value="strength">Strength</option>
                                        <option value="dexterity">Dexterity</option>
                                        <option value="constitution">Constitution</option>
                                        <option value="intelligence">Intelligence</option>
                                        <option value="wisdom">Wisdom</option>
                                        <option value="charisma">Charisma</option>
                                    </select>
                                    <button class="add-custom-skill-btn" onclick="addCustomSkillToSelection()">
                                        <span class="material-icons">add</span>
                                        Add Skill
                                    </button>
                                </div>
                                <div class="custom-skills-list" id="custom-skills-list">
                                    <!-- Custom skills will appear here -->
                                </div>
                            </div>
                        </div>

                        <!-- Selected Skills Display -->
                        <div class="selected-skills-section">
                            <h4>Your Selected Skills</h4>
                            <div class="selected-skills-grid" id="selected-skills-grid">
                                <div class="no-skills-message">
                                    <i class="ra ra-help"></i>
                                    <p>No skills selected yet. Choose up to 5 skills above!</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-bar">
                        <button class="action-btn new-char-btn" onclick="createNewCharacter()">
                            <span class="material-icons">person_add</span>
                            New Character
                        </button>
                        <button class="action-btn primary-btn" onclick="saveCharacterToStorage()">
                            <span class="material-icons">save</span>
                            Save Character
                        </button>
                        <button class="action-btn secondary-btn" onclick="loadCharacterFromStorage()">
                            <span class="material-icons">folder_open</span>
                            Load
                        </button>
                        <button class="action-btn secondary-btn" onclick="exportCharacterToJSON()">
                            <span class="material-icons">download</span>
                            Export
                        </button>
                        <button class="action-btn qr-btn" onclick="shareCharacterAsCard()">
                            <span class="material-icons">photo</span>
                            Share Card
                        </button>
                        <button class="action-btn scan-btn" onclick="loadCharacterFromCard()">
                            <span class="material-icons">upload</span>
                            Load Card
                        </button>
                    </div>
                </div>
            </section>

            <!-- Character Stats Tab -->
            <section class="tab-content" id="character">
                <div class="content-wrapper">
                    <!-- Character Overview with Optimized Layout -->
                    <div class="character-overview">
                        <div class="overview-combined">
                            <!-- Main Content with Character Info Header -->
                            <div class="overview-main">
                                <!-- Character Info Row: Full Width -->
                                <div class="character-info-row">
                                    <h2 id="char-display-name">Character Overview</h2>
                                    <div class="level-info">
                                        <span id="char-level-display">Level 1</span>
                                        <button id="level-up-btn" class="level-up-pill-btn" onclick="handleLevelUp()" style="display: none;">
                                            <i class="ra ra-star"></i>
                                            Level Up!
                                        </button>
                                    </div>
                                </div>
                                
                                <!-- Two Columns: Avatar & Vitals -->
                                <div class="overview-columns">
                                    <!-- Column 1: Avatar -->
                                    <div class="overview-avatar">
                                        <div class="overview-portrait" id="overview-portrait">
                                            <div class="portrait-placeholder">
                                                <i class="ra ra-hood"></i>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Column 2: HP, MP, Damage System -->
                                    <div class="overview-vitals">
                                        <!-- HP System -->
                                        <div class="vital-item">
                                            <i class="ra ra-hearts"></i>
                                            <span class="vital-label">HP</span>
                                            <span class="vital-value">
                                                <span id="char-current-hp">3</span>/<span id="char-total-hp">3</span>
                                            </span>
                                        </div>
                                        
                                        <!-- MP System -->
                                        <div class="vital-item">
                                            <i class="ra ra-crystal-wand"></i>
                                            <span class="vital-label">MP</span>
                                            <span class="vital-value">
                                                <span id="char-current-mp">4</span>/<span id="char-total-mp">4</span>
                                            </span>
                                        </div>
                                        
                                        <!-- Damage System -->
                                        <div class="vital-item damage-tester-inline">
                                            <i class="ra ra-sword"></i>
                                            <span class="vital-label">DMG</span>
                                            <div class="damage-controls">
                                                <input type="number" id="damage-input" class="damage-input" placeholder="5"
                                                    value="5" min="1">
                                                <button class="damage-btn" onclick="testDamage()">
                                                    Take
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Bottom Row: Heritage/Background/Class Info -->
                            <div class="overview-footer">
                                <div id="char-summary" class="character-summary">
                                    <!-- Summary will be rendered here -->
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Rest Options -->
                    <div class="rest-options">
                        <button class="rest-btn quick-rest" onclick="quickRest()">
                            <i class="ra ra-campfire"></i>
                            <span>Quick Rest</span>
                            <small>4 hours ‚Ä¢ +Half HP/MP</small>
                        </button>
                        <button class="rest-btn long-rest" onclick="longRest()">
                            <i class="ra ra-moon-sun"></i>
                            <span>Long Rest</span>
                            <small>8 hours ‚Ä¢ Full Recovery</small>
                        </button>
                    </div>

                    <!-- Attributes Display -->
                    <div class="card">
                        <div class="card-header">
                            <div class="header-left">
                                <i class="ra ra-muscle-up"></i>
                                <h3>Attributes</h3>
                            </div>
                            <span class="header-hint">Tap any attribute to roll!</span>
                        </div>
                        <div class="attributes-display" id="char-stats-display">
                            <!-- Stats will be rendered here -->
                        </div>
                        <div class="bonus-sources-display" id="bonus-sources-display">
                            <!-- Bonus source info will be rendered here -->
                        </div>
                    </div>

                    <!-- Abilities Navigation -->
                    <div class="abilities-nav">
                        <button class="ability-nav-btn active" data-ability="skills">
                            <i class="ra ra-gears"></i>
                            Skills
                        </button>
                        <button class="ability-nav-btn" data-ability="weapons">
                            <i class="ra ra-crossed-swords"></i>
                            Weapons
                        </button>
                        <button class="ability-nav-btn" data-ability="spells">
                            <i class="ra ra-fairy-wand"></i>
                            Spells
                        </button>
                    </div>

                    <!-- Abilities Content -->
                    <div class="abilities-content">
                        <!-- Skills -->
                        <div class="ability-panel active" id="skills-content">
                            <div class="ability-grid" id="char-skills-grid">
                                <!-- Skills will be rendered here -->
                            </div>

                            <div class="add-ability-section">
                                <h4><i class="ra ra-plus-sword"></i> Add Custom Skill</h4>
                                <div class="add-ability-form">
                                    <input type="text" id="char-custom-skill-name" class="ability-name-input"
                                        placeholder="Skill name">
                                    <select id="char-custom-skill-stat" class="ability-stat-select">
                                        <option value="strength">STR</option>
                                        <option value="dexterity">DEX</option>
                                        <option value="constitution">CON</option>
                                        <option value="intelligence">INT</option>
                                        <option value="wisdom">WIS</option>
                                        <option value="charisma">CHA</option>
                                    </select>
                                    <button class="add-ability-btn" onclick="addCustomSkillFromCharTab()">
                                        <span class="material-icons">add</span>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Weapons -->
                        <div class="ability-panel" id="weapons-content">
                            <div id="char-weapons-container" class="weapons-container">
                                <!-- Weapons will be rendered here -->
                            </div>
                        </div>

                        <!-- Spells -->
                        <div class="ability-panel" id="spells-content">
                            <div id="char-spells-container" class="spells-container">
                                <!-- Spells will be rendered here -->
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Inventory Tab -->
            <section class="tab-content" id="inventory">
                <div class="content-wrapper">
                    <!-- Equipment Slots -->
                    <div class="card">
                        <div class="card-header">
                            <i class="ra ra-vest"></i>
                            <h3>Equipment</h3>
                        </div>
                        <div class="equipment-grid">
                            <div class="equipment-slot" data-slot="mainHand" onclick="showEquipMenu('mainHand')">
                                <div class="slot-icon"><i class="ra ra-sword"></i></div>
                                <div class="slot-info">
                                    <div class="slot-label">Main Hand</div>
                                    <div class="slot-item" id="mainHand-item">Empty</div>
                                    <div class="slot-stats" id="mainHand-stats"></div>
                                </div>
                            </div>
                            <div class="equipment-slot" data-slot="offHand" onclick="showEquipMenu('offHand')">
                                <div class="slot-icon"><i class="ra ra-shield"></i></div>
                                <div class="slot-info">
                                    <div class="slot-label">Off Hand</div>
                                    <div class="slot-item" id="offHand-item">Empty</div>
                                    <div class="slot-stats" id="offHand-stats"></div>
                                </div>
                            </div>
                            <div class="equipment-slot" data-slot="armor" onclick="showEquipMenu('armor')">
                                <div class="slot-icon"><i class="ra ra-vest"></i></div>
                                <div class="slot-info">
                                    <div class="slot-label">Armor</div>
                                    <div class="slot-item" id="armor-item">Empty</div>
                                    <div class="slot-stats" id="armor-stats"></div>
                                </div>
                            </div>
                            <div class="equipment-slot" data-slot="accessory" onclick="showEquipMenu('accessory')">
                                <div class="slot-icon"><i class="ra ra-gem-pendant"></i></div>
                                <div class="slot-info">
                                    <div class="slot-label">Accessory</div>
                                    <div class="slot-item" id="accessory-item">Empty</div>
                                    <div class="slot-stats" id="accessory-stats"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Inventory Grid -->
                    <div class="card">
                        <div class="card-header">
                            <i class="ra ra-backpack"></i>
                            <h3>Inventory</h3>
                            <div class="inventory-stats">
                                <div class="gold-display">
                                    <i class="ra ra-gold-bar"></i>
                                    <span id="character-gold">0</span> GP
                                </div>
                            </div>
                        </div>
                        
                        <!-- Trade Area / Loot Section -->
                        <div class="trade-area-section" id="trade-area-section">
                            <div class="trade-header">
                                <i class="ra ra-gem-pendant"></i>
                                <h4>Recent Loot</h4>
                                <button class="btn-small" onclick="transferTradeItems()">
                                    Transfer to Inventory
                                </button>
                            </div>
                            <div class="trade-grid" id="trade-grid">
                                <div class="empty-state">
                                    <i class="ra ra-death-skull"></i>
                                    <p>Defeat enemies to earn loot!</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="inventory-grid" id="inventory-grid">
                            <!-- Items will be rendered here -->
                            <div class="empty-state">
                                <i class="ra ra-backpack"></i>
                                <p>Your inventory is empty</p>
                            </div>
                        </div>

                        <!-- DCC Book Items Button - COMMENTED OUT (using dynamically created one instead) -->
                        <!--
                        <div class="dcc-templates-btn inventory-item" onclick="openDCCItemsModal()">
                            <div style="text-align: center; padding: 20px; border: 2px dashed #ff6b35; background: rgba(255, 107, 53, 0.1); border-radius: 8px; cursor: pointer;">
                                <i class="ra ra-book" style="font-size: 2em; color: #ff6b35; margin-bottom: 10px; display: block;"></i>
                                <strong>üìö DCC Book Items</strong>
                                <br><small>Click to add items from the books</small>
                            </div>
                        </div>
                        -->

                        <!-- Add Item Form - COMMENTED OUT FOR MODERNIZATION -->
                        <!--
                        <div class="add-item-section">
                            <h4><i class="ra ra-anvil"></i> Create New Item</h4>
                            <div class="item-creator">
                                <input type="text" id="item-name" class="item-input" placeholder="Item name">

                                <div class="item-options">
                                    <select id="item-type" class="item-select">
                                        <option value="weapon">‚öîÔ∏è Weapon</option>
                                        <option value="armor">üõ°Ô∏è Armor</option>
                                        <option value="accessory">üíç Accessory</option>
                                        <option value="consumable">üß™ Consumable</option>
                                        <option value="misc">üì¶ Miscellaneous</option>
                                    </select>

                                    <select id="weapon-size" class="item-select">
                                        <option value="light">Light (d4)</option>
                                        <option value="medium">Medium (d6)</option>
                                        <option value="heavy">Heavy (d8)</option>
                                    </select>

                                    <input type="number" id="item-defense" class="item-input" placeholder="Defense"
                                        min="0">
                                </div>

                                <div class="item-properties">
                                    <label class="checkbox-label">
                                        <input type="checkbox" id="item-twohanded">
                                        <span>Two-Handed</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" id="item-ranged">
                                        <span>Ranged</span>
                                    </label>
                                    <label class="checkbox-label" id="healing-consumable-container"
                                        style="display: none;">
                                        <input type="checkbox" id="item-healing">
                                        <span>Healing</span>
                                    </label>
                                </div>

                                <button class="create-item-btn" onclick="addItem()">
                                    <i class="ra ra-hammer"></i>
                                    Create Item
                                </button>
                            </div>
                        </div>
                        -->
                        
                        <!-- DCC Items Browser - Load from dcc-items.json -->
                        <div class="dcc-items-section">
                            <div class="card-header">
                                <i class="ra ra-book"></i>
                                <h4>DCC Equipment Catalog</h4>
                                <button class="btn-small" onclick="toggleDCCItemsBrowser()">
                                    Browse Items
                                </button>
                            </div>
                            <div class="dcc-items-browser" id="dcc-items-browser" style="display: none;">
                                <div class="items-filter">
                                    <select id="dcc-category-filter">
                                        <option value="all">All Categories</option>
                                        <option value="weapons">Weapons</option>
                                        <option value="armor">Armor</option>
                                        <option value="equipment">Equipment</option>
                                        <option value="adventuring_gear">Adventuring Gear</option>
                                    </select>
                                </div>
                                <div class="dcc-items-grid" id="dcc-items-grid">
                                    <!-- DCC items will be loaded here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Magic Tab -->
            <section class="tab-content" id="magic">
                <div class="content-wrapper">
                    <!-- Magic Points Display -->
                    <div class="magic-header">
                        <div class="magic-pool">
                            <i class="ra ra-crystal-wand"></i>
                            <div class="magic-counter">
                                <button class="counter-btn" onclick="adjustMagicPointsInTab(-1)">-</button>
                                <div class="magic-display">
                                    <span id="magic-current-mp">4</span>
                                    <span>/</span>
                                    <span id="magic-total-mp">4</span>
                                </div>
                                <button class="counter-btn" onclick="adjustMagicPointsInTab(1)">+</button>
                            </div>
                            <span class="magic-label">Magic Points</span>
                        </div>
                    </div>

                    <!-- Known Spells -->
                    <div class="card">
                        <div class="card-header">
                            <i class="ra ra-scroll-unfurled"></i>
                            <h3>Spell Book</h3>
                        </div>
                        <div id="spells-grid" class="spells-grid">
                            <!-- Spells will be rendered here -->
                        </div>
                    </div>

                    <!-- Spell Creator -->
                    <div class="card spell-creator-card">
                        <div class="card-header">
                            <i class="ra ra-cauldron"></i>
                            <h3>Craft New Spell</h3>
                        </div>

                        <div class="spell-creator">
                            <input type="text" id="spell-name" class="spell-name-input" placeholder="Spell name">

                            <div class="spell-element-select">
                                <label>Element</label>
                                <select id="spell-element" class="element-select">
                                    <option value="fire">üî• Fire</option>
                                    <option value="ice">‚ùÑÔ∏è Ice</option>
                                    <option value="lightning">‚ö° Lightning</option>
                                    <option value="earth">üåç Earth</option>
                                    <option value="air">üí® Air</option>
                                    <option value="water">üíß Water</option>
                                    <option value="light">‚òÄÔ∏è Light</option>
                                    <option value="dark">üåë Dark</option>
                                    <option value="arcane">üîÆ Arcane</option>
                                    <option value="divine">‚ú® Divine</option>
                                    <option value="nature">üåø Nature</option>
                                    <option value="psychic">üß† Psychic</option>
                                    <option value="shadow">üë§ Shadow</option>
                                    <option value="force">üí• Force</option>
                                </select>
                            </div>

                            <div class="spell-effects">
                                <div class="effect-row">
                                    <label>Damage</label>
                                    <select id="damage-type" class="effect-select">
                                        <option value="">None</option>
                                        <option value="fixed">Fixed (2pts = 1MP)</option>
                                        <option value="d6">D6 Roll (3MP)</option>
                                    </select>
                                    <input type="number" id="damage-amount" class="effect-amount" min="0" max="10"
                                        value="0" disabled>
                                </div>

                                <div class="effect-row">
                                    <label>Healing</label>
                                    <select id="healing-type" class="effect-select">
                                        <option value="">None</option>
                                        <option value="fixed">Fixed (2pts = 1MP)</option>
                                        <option value="d6">D6 Roll (3MP)</option>
                                    </select>
                                    <input type="number" id="healing-amount" class="effect-amount" min="0" max="10"
                                        value="0" disabled>
                                </div>

                                <div class="effect-row">
                                    <label>Primary Effect</label>
                                    <select id="primary-effect" class="effect-select">
                                        <option value="">None</option>
                                        <option value="stun">‚ö° Stun</option>
                                        <option value="slow">üêå Slow</option>
                                        <option value="blind">üëÅÔ∏è Blind</option>
                                        <option value="fear">üò± Fear</option>
                                        <option value="charm">üíï Charm</option>
                                        <option value="sleep">üò¥ Sleep</option>
                                        <option value="paralyze">ü•∂ Paralyze</option>
                                        <option value="confusion">üåÄ Confuse</option>
                                        <option value="weakness">üí™ Weakness</option>
                                        <option value="poison">ü§¢ Poison</option>
                                    </select>
                                </div>

                                <div class="effect-row">
                                    <label>Secondary Effect</label>
                                    <select id="secondary-effect" class="effect-select">
                                        <option value="">None</option>
                                        <option value="invisibility">üëª Invisibility</option>
                                        <option value="flight">ü¶Ö Flight</option>
                                        <option value="teleport">üåÄ Teleport</option>
                                        <option value="shield">üõ°Ô∏è Shield</option>
                                        <option value="haste">‚ö° Haste</option>
                                        <option value="strength">üí™ Strength</option>
                                        <option value="detect">üîç Detect Magic</option>
                                        <option value="dispel">‚ùå Dispel</option>
                                        <option value="light_source">üí° Light</option>
                                        <option value="darkness">üåë Darkness</option>
                                    </select>
                                </div>
                            </div>

                            <div id="spell-cost-display" class="spell-cost-display">
                                <h4>Spell Cost</h4>
                                <div id="cost-breakdown" class="cost-breakdown">
                                    Base Cost: 1 MP
                                </div>
                                <div class="total-cost">
                                    Total: <span id="total-cost">1</span> MP
                                </div>
                            </div>

                            <button class="create-spell-btn" onclick="createSpell()" id="create-spell-btn">
                                <i class="ra ra-sparkles"></i>
                                Create Spell
                            </button>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Combat Tab (Merged Status + Rolling) -->
            <section class="tab-content" id="combat">
                <div class="content-wrapper">
                    <!-- Dice System Info -->
                    <div class="card dice-info-card">
                        <div class="card-header">
                            <i class="ra ra-perspective-dice-six"></i>
                            <h3>Dice System</h3>
                        </div>
                        <div id="dice-system-info" class="dice-info">
                            <div id="dice-explanation">
                                <!-- Dice system will be explained here -->
                            </div>
                        </div>
                    </div>

                    <!-- Roll History -->
                    <div class="card">
                        <div class="card-header">
                            <i class="ra ra-scroll-unfurled"></i>
                            <h3>Roll History</h3>
                            <button class="clear-btn" onclick="clearRollHistory()">
                                <span class="material-icons">clear_all</span>
                            </button>
                        </div>
                        <div id="roll-history" class="roll-history">
                            <!-- Roll history will be rendered here -->
                        </div>
                    </div>

                    <!-- Status Effects -->
                    <div class="card">
                        <div class="card-header">
                            <i class="ra ra-biohazard"></i>
                            <h3>Status Effects</h3>
                        </div>
                        <div id="status-effects-grid" class="status-grid">
                            <!-- Status effects will be rendered here -->
                        </div>

                        <!-- Add Status Effect -->
                        <!-- OLD DROPDOWN SYSTEM - COMMENTED OUT FOR NEW BUTTON SYSTEM IN MODAL
                        <div class="add-status-section">
                            <h4>Apply Status Effect</h4>
                            <div class="status-form">
                                <select id="status-effect-type" class="status-select">
                                    <option value="bleeding">ü©∏ Bleeding</option>
                                    <option value="poisoned">ü§¢ Poisoned</option>
                                    <option value="radiation">‚ò¢Ô∏è Radiation</option>
                                    <option value="exhausted">üò¥ Exhausted</option>
                                    <option value="dehydrated">üíß Dehydrated</option>
                                    <option value="hypothermia">üßä Hypothermia</option>
                                    <option value="heatstroke">üî• Heat Exhaustion</option>
                                    <option value="broken_bone">ü¶¥ Broken Bone</option>
                                    <option value="stunned">‚ö° Stunned</option>
                                    <option value="feared">üò± Feared</option>
                                    <option value="inspired">‚ú® Inspired</option>
                                    <option value="custom">‚öôÔ∏è Custom</option>
                                </select>

                                <input type="text" id="custom-status-name" class="status-input"
                                    placeholder="Custom effect name" style="display: none;">

                                <div class="status-options">
                                    <input type="number" id="status-duration" class="duration-input" value="10" min="1"
                                        max="1440">
                                    <span class="duration-label">minutes</span>
                                </div>

                                <input type="text" id="status-notes" class="status-notes"
                                    placeholder="Additional notes...">

                                <button class="add-status-btn" onclick="addStatusEffect()">
                                    <i class="ra ra-flask"></i>
                                    Apply Effect
                                </button>
                            </div>
                        </div>
                        -->
                    </div>
                </div>
            </section>

            <!-- Chat Tab -->
            <section class="tab-content" id="chat">
                <div class="content-wrapper">
                    <!-- Session Connection -->
                    <div class="session-connection">
                        <div class="session-controls">
                            <input type="text" id="session-code-input" placeholder="Paste connection URL from storyteller">
                            <button class="join-session-btn" onclick="joinGameSession()">Join Game</button>
                            <!-- Command Center Toggle Button - Always Visible -->
                            <button class="notification-btn command-center-toggle" id="command-center-toggle-main" onclick="toggleCommandCenterModal()" title="Open Command Center" style="margin-left: 10px;">
                                <span class="material-icons">people</span>
                            </button>
                        </div>
                        <div class="connection-status">
                            <span class="status-dot" id="connection-status-dot"></span>
                            <span class="status-text" id="connection-status-text">Not connected</span>
                        </div>
                    </div>

                    <!-- Chat Messages Area -->
                    <div class="chat-messages-area">
                        <!-- Connection toggle button (shown when connected) -->
                        <div class="connection-toggle" id="connection-toggle" style="display: none;">
                            <div class="toggle-controls">
                                <button class="toggle-connection-btn" onclick="toggleConnectionArea()" title="Show connection settings">
                                    <span class="material-icons">settings</span>
                                    Connection
                                </button>
                                
                                <!-- Notification icons (future features) -->
                                <div class="notification-icons">
                                    <button class="notification-btn" id="notes-notification" style="display: none;" title="New direct message/note">
                                        <span class="material-icons">mail</span>
                                        <span class="notification-dot"></span>
                                    </button>
                                    <button class="notification-btn" id="dice-notification" style="display: none;" title="Dice roll request">
                                        <span class="material-icons">casino</span>
                                        <span class="notification-dot"></span>
                                    </button>
                                    <button class="notification-btn" id="map-notification" style="display: none;" title="Map update" onclick="showMapOverlay()">
                                        <span class="material-icons">map</span>
                                        <span class="notification-dot"></span>
                                    </button>
                                    <!-- Command Center Toggle Button -->
                                    <button class="notification-btn command-center-toggle" id="command-center-toggle" onclick="toggleCommandCenterModal()" title="Open Command Center">
                                        <span class="material-icons">people</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Chat Layout: Full-width Messages -->
                        <div class="chat-layout">
                            <div id="chat-messages">
                                <div class="chat-message system">
                                    <span class="message-author">System:</span>
                                    Welcome to DCC! Enter a session code above to join your game.
                                </div>
                            </div>
                        </div>
                        
                        <!-- Chat Input -->
                        <div class="chat-input-container">
                            <div class="chat-tools">
                                <button class="chat-tool-btn" onclick="showChatPicker()" title="Chat Effects & Emojis">
                                    üí¨
                                    <span>Effects</span>
                                </button>
                            </div>
                            <div class="chat-input-area">
                                <input type="text" id="chat-input" placeholder="Type your message..." onkeypress="handleChatKeyPress(event)">
                            </div>
                            <button class="send-chat-btn" onclick="sendMessage()" id="send-chat-btn" disabled>Send</button>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Notes Tab -->
            <section class="tab-content" id="notes">
                <div class="content-wrapper">
                    <div class="notes-header">
                        <h2><i class="ra ra-journal"></i> Campaign Notes</h2>
                        <button class="save-notes-btn" onclick="saveNotesToCharacter()">
                            <span class="material-icons">save</span>
                            Save Notes
                        </button>
                    </div>

                    <div class="notes-grid">
                        <div class="note-card">
                            <div class="note-header">
                                <i class="ra ra-hood"></i>
                                <h3>Personal</h3>
                            </div>
                            <textarea id="personal-notes" class="note-textarea"
                                placeholder="Character thoughts, development, personal goals..."></textarea>
                        </div>

                        <div class="note-card">
                            <div class="note-header">
                                <i class="ra ra-key"></i>
                                <h3>Party</h3>
                            </div>
                            <textarea id="party-notes" class="note-textarea"
                                placeholder="Party members, relationships, group dynamics..."></textarea>
                        </div>

                        <div class="note-card">
                            <div class="note-header">
                                <i class="ra ra-quill-ink"></i>
                                <h3>Session</h3>
                            </div>
                            <textarea id="session-notes" class="note-textarea"
                                placeholder="What happened this session..."></textarea>
                        </div>

                        <div class="note-card">
                            <div class="note-header">
                                <i class="ra ra-gold-bar"></i>
                                <h3>Trade</h3>
                            </div>
                            <textarea id="barter-notes" class="note-textarea"
                                placeholder="Merchants, deals, debts, opportunities..."></textarea>
                        </div>

                        <div class="note-card">
                            <div class="note-header">
                                <i class="ra ra-compass"></i>
                                <h3>World</h3>
                            </div>
                            <textarea id="world-notes" class="note-textarea"
                                placeholder="Locations, lore, important places..."></textarea>
                        </div>

                        <div class="note-card">
                            <div class="note-header">
                                <i class="ra ra-crossed-swords"></i>
                                <h3>Combat</h3>
                            </div>
                            <textarea id="combat-notes" class="note-textarea"
                                placeholder="Enemy tactics, weaknesses, strategies..."></textarea>
                        </div>

                        <div class="note-card">
                            <div class="note-header">
                                <i class="material-icons">mail</i>
                                <h3>Private Messages</h3>
                                <span class="note-count" id="private-messages-count" style="display: none;"></span>
                            </div>
                            <div id="private-messages-container" class="private-messages-container">
                                <div style="text-align: center; color: #8a8a8a; padding: 20px;">
                                    <i class="material-icons" style="font-size: 2em; margin-bottom: 10px; display: block;">mail_outline</i>
                                    No private messages yet! Send or receive private notes via player chip clicks.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Storage Manager Tab -->
            <section class="tab-content" id="storage">
                <div class="content-wrapper">
                    <div class="notes-header">
                        <h2>üóÑÔ∏è Storage Manager</h2>
                        <button class="save-notes-btn" onclick="refreshStorageStats()">
                            <span class="material-icons">refresh</span>
                            Refresh Stats
                        </button>
                    </div>

                    <div class="notes-grid">
                        <div class="note-card">
                            <div class="note-header">
                                <span>üìä</span>
                                <h3>Storage Usage</h3>
                            </div>
                            <div id="storage-stats-display" style="padding: 15px; font-family: monospace; background: var(--bg-secondary); border-radius: 4px; margin: 10px 0;">
                                <div style="color: var(--text-secondary);">Loading storage statistics...</div>
                            </div>
                        </div>

                        <div class="note-card">
                            <div class="note-header">
                                <span>üõ†Ô∏è</span>
                                <h3>Storage Actions</h3>
                            </div>
                            <div style="padding: 15px;">
                                <button class="save-notes-btn" onclick="migratePlayerStorage()" style="width: 100%; margin-bottom: 10px;">
                                    üì¶ Migrate to IndexedDB
                                </button>
                                <button class="save-notes-btn" onclick="cleanupPlayerStorage()" style="width: 100%; margin-bottom: 10px; background: var(--warning-gradient);">
                                    üßπ Cleanup Old Data
                                </button>
                                <button class="save-notes-btn" onclick="exportPlayerData()" style="width: 100%; background: var(--success-gradient);">
                                    üíæ Export Character Data
                                </button>
                            </div>
                        </div>

                        <div class="note-card">
                            <div class="note-header">
                                <span>üìã</span>
                                <h3>Data Items</h3>
                            </div>
                            <div id="storage-items-display" style="padding: 15px; max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 0.85em; background: var(--bg-secondary); border-radius: 4px; margin: 10px 0;">
                                <div style="color: var(--text-secondary);">Loading data items...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Reference/How the Game Works Tab -->
            <section class="tab-content" id="reference">
                <div class="content-wrapper">
                    <div class="card">
                        <div class="card-header">
                            <i class="material-icons">help_outline</i>
                            <h3>How the Game Works</h3>
                        </div>
                        <div class="reference-loading">
                            <div class="loading-spinner"></div>
                            <p>Loading game reference...</p>
                        </div>
                        <div class="reference-content" id="reference-content" style="display: none;">
                            <!-- Markdown content will be loaded here -->
                        </div>
                    </div>
                </div>
            </section>
        </main>
    </div>

    <!-- Notification Container -->
    <div id="notification-container"></div>

    <!-- Character Landing Screen (Initially visible, managed by JS) -->
    <!-- ORIGINAL LANDING DESIGN (BACKUP)
    <div id="character-landing" class="character-landing" style="display: none;">
        <div class="landing-header">
            <h1><i class="ra ra-knight-helmet"></i> Dungeon Crawler</h1>
            <p>Choose your character or create a new one</p>
        </div>

        <div class="landing-actions">
            <button class="landing-btn primary-btn" onclick="createNewCharacter()">
                <span class="material-icons">person_add</span>
                New Character
            </button>
            <button class="landing-btn secondary-btn" onclick="importCharacterToManager()">
                <span class="material-icons">upload</span>
                Import Character
            </button>
            <button class="landing-btn secondary-btn" onclick="exportAllCharacters()">
                <span class="material-icons">download</span>
                Export All
            </button>
        </div>

        <div class="characters-grid" id="characters-grid">
            <!-- Character cards will be populated here -->
        </div>

        <div class="landing-footer">
            <p>Characters are saved locally in your browser. Use Export to backup your characters.</p>
        </div>
    </div>
    -->

    <!-- MODERN LANDING DESIGN -->
    <div id="character-landing" class="character-landing modern-landing" style="display: none;">
        <!-- Hero Section with Background -->
        <div class="landing-hero">
            <div class="hero-background">
                <div class="hero-overlay"></div>
            </div>
            <div class="hero-content">
                <div class="landing-header">
                    <h1 class="hero-title">
                        <i class="ra ra-knight-helmet hero-icon"></i>
                        <span class="title-text">Dungeon Crawler</span>
                        <span class="title-subtitle">Character Portal</span>
                    </h1>
                    <p class="hero-description">Choose your character or forge a new legend</p>
                </div>

                <div class="landing-actions">
                    <button class="landing-btn primary-btn hero-btn" onclick="createNewCharacter()">
                        <div class="btn-content">
                            <span class="material-icons btn-icon">person_add</span>
                            <div class="btn-text">
                                <span class="btn-title">New Character</span>
                                <span class="btn-subtitle">Start your journey</span>
                            </div>
                        </div>
                    </button>
                    <button class="landing-btn secondary-btn hero-btn" onclick="importCharacterToManager()">
                        <div class="btn-content">
                            <span class="material-icons btn-icon">upload</span>
                            <div class="btn-text">
                                <span class="btn-title">Import</span>
                                <span class="btn-subtitle">Load saved character</span>
                            </div>
                        </div>
                    </button>
                    <button class="landing-btn secondary-btn hero-btn" onclick="exportAllCharacters()">
                        <div class="btn-content">
                            <span class="material-icons btn-icon">download</span>
                            <div class="btn-text">
                                <span class="btn-title">Export All</span>
                                <span class="btn-subtitle">Backup characters</span>
                            </div>
                        </div>
                    </button>
                </div>
            </div>
        </div>

        <!-- Characters Section -->
        <div class="characters-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="ra ra-player"></i>
                    Your Characters
                </h2>
                <div class="section-stats" id="character-stats">
                    <!-- Will be populated by JS -->
                </div>
            </div>
            
            <div class="characters-grid" id="characters-grid">
                <!-- Character cards will be populated here -->
            </div>
        </div>

        <div class="landing-footer">
            <div class="footer-content">
                <div class="footer-info">
                    <i class="material-icons footer-icon">info</i>
                    <span>Characters are saved locally in your browser. Use Export to backup your characters.</span>
                </div>
                <div class="footer-links">
                    <button class="footer-link" onclick="showStorageInfo()">
                        <i class="material-icons">storage</i>
                        Storage Info
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- DCC Items Modal -->
    <div id="dcc-items-modal" class="modal" style="display: none;">
        <div class="modal-content dcc-items-modal-content">
            <div class="modal-header">
                <h3><i class="ra ra-book"></i> DCC Book Items</h3>
                <button class="close-modal" onclick="closeDCCItemsModal()">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="dcc-items-filter-bar">
                    <select id="dcc-modal-category-filter">
                        <option value="all">All Categories</option>
                        <option value="weapons">Weapons</option>
                        <option value="armor">Armor</option>
                        <option value="equipment">Equipment</option>
                        <option value="adventuring_gear">Adventuring Gear</option>
                    </select>
                    <input type="text" id="dcc-items-search" placeholder="Search items...">
                </div>
                
                <div class="dcc-items-modal-grid" id="dcc-items-modal-grid">
                    <div class="loading-state">
                        <i class="ra ra-spinning-sword"></i>
                        <p>Loading DCC items...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Layout Selection Modal -->
    <div id="layout-selection-modal" class="modal" style="display: none;">
        <div class="modal-content layout-modal-content">
            <div class="modal-header">
                <h3>Choose Card Layout</h3>
                <button class="close-modal" onclick="closeLayoutSelectionModal()">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="layout-instructions">Select the type of character card you'd like to generate:</p>
                
                <div class="layout-grid">
                    <div class="layout-option" onclick="generateSelectedLayout('portrait')">
                        <div class="layout-preview portrait-preview">
                            <div class="preview-avatar"></div>
                            <div class="preview-name">Character Name</div>
                            <div class="preview-stats">
                                <div class="preview-stat-line"></div>
                                <div class="preview-stat-line"></div>
                                <div class="preview-stat-line"></div>
                            </div>
                            <div class="preview-decorative"></div>
                        </div>
                        <h4>Portrait Card</h4>
                        <p>Character portrait with key stats. Perfect for sharing on social media.</p>
                    </div>

                    <div class="layout-option" onclick="generateSelectedLayout('stat-sheet')">
                        <div class="layout-preview stat-sheet-preview">
                            <div class="preview-mini-avatar"></div>
                            <div class="preview-title">Character Sheet</div>
                            <div class="preview-stats-grid">
                                <div class="preview-stat-block"></div>
                                <div class="preview-stat-block"></div>
                                <div class="preview-stat-block"></div>
                                <div class="preview-stat-block"></div>
                            </div>
                        </div>
                        <h4>Stat Sheet</h4>
                        <p>Compact format showing detailed character statistics and abilities.</p>
                    </div>

                    <div class="layout-option" onclick="generateSelectedLayout('full-sheet')">
                        <div class="layout-preview full-sheet-preview">
                            <div class="preview-graph-paper">
                                <div class="preview-header-section"></div>
                                <div class="preview-content-grid">
                                    <div class="preview-section"></div>
                                    <div class="preview-section"></div>
                                    <div class="preview-section"></div>
                                    <div class="preview-section"></div>
                                </div>
                            </div>
                        </div>
                        <h4>Full Character Sheet</h4>
                        <p>Complete character sheet with classic graphing paper background - nostalgic D&D style!</p>
                    </div>

                    <div class="layout-option" onclick="generateSelectedLayout('combat-card')">
                        <div class="layout-preview combat-preview">
                            <div class="preview-combat-header"></div>
                            <div class="preview-hp-section">
                                <div class="preview-hp-bar"></div>
                                <div class="preview-mp-bar"></div>
                            </div>
                            <div class="preview-equipment">
                                <div class="preview-weapon"></div>
                                <div class="preview-armor"></div>
                            </div>
                        </div>
                        <h4>Combat Card</h4>
                        <p>Quick reference for combat - HP, weapons, spells, and key stats.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Character Card Modal -->
    <div id="card-modal" class="modal" style="display: none;">
        <div class="modal-content card-modal-content">
            <div class="modal-header">
                <h3>Character Card</h3>
                <button class="close-modal" onclick="closeCardModal()">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card-display">
                    <canvas id="card-canvas"></canvas>
                </div>
                <p class="card-instructions">
                    <i class="material-icons">info</i>
                    Beautiful character card with embedded data for easy sharing!
                </p>
                <div class="card-actions">
                    <button class="action-btn secondary-btn" onclick="downloadCharacterCard()">
                        <span class="material-icons">download</span>
                        Save Card
                    </button>
                    <button class="action-btn primary-btn" onclick="shareCharacterCard()">
                        <span class="material-icons">share</span>
                        Share
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Character Card Load Modal -->
    <div id="card-scanner-modal" class="modal" style="display: none;">
        <div class="modal-content card-scanner-modal-content">
            <div class="modal-header">
                <h3>Load Character Card</h3>
                <button class="close-modal" onclick="closeCardScannerModal()">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card-upload-area">
                    <div class="upload-instructions">
                        <i class="material-icons">upload_file</i>
                        <h4>Select Character Card</h4>
                        <p>Choose a PNG character card file to load the embedded character data.</p>
                    </div>
                    <input type="file" id="card-upload" accept="image/*" onchange="handleCardUpload(event)" style="display: none;">
                    <button class="upload-btn" onclick="document.getElementById('card-upload').click()">
                        <span class="material-icons">folder_open</span>
                        Choose File
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Roll History Modal -->
    <div id="roll-history-modal" class="modal level-up-modal-overlay" style="display: none;">
        <div class="modal-content level-up-modal-content">
            <div class="modal-header">
                <h3><i class="ra ra-perspective-dice-six"></i> Roll History</h3>
                <button class="close-modal" onclick="closeRollHistoryModal()" style="background: transparent; border: none; color: white; font-size: 24px; cursor: pointer;">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="modal-body">
                <div style="max-height: 400px; overflow-y: auto; scrollbar-width: thin; scrollbar-color: #ffd700 rgba(255,255,255,0.1);">
                    <div id="roll-history-modal-content" class="roll-history">
                        <div style="text-align: center; color: #8a8a8a; padding: 40px;">
                            <i class="ra ra-perspective-dice-six" style="font-size: 3em; margin-bottom: 15px; display: block;"></i>
                            No rolls yet! Click attributes, skills, weapons, or spells in the Character tab to start rolling.
                        </div>
                    </div>
                </div>
                <div style="margin-top: 15px; text-align: center;">
                    <button class="action-btn" onclick="clearRollHistory()" style="background: rgba(139, 69, 19, 0.8); color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                        <span class="material-icons" style="vertical-align: middle; margin-right: 5px;">clear_all</span>
                        Clear History
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Effects Modal -->
    <div id="status-effects-modal" class="modal level-up-modal-overlay" style="display: none;">
        <div class="modal-content level-up-modal-content">
            <div class="modal-header">
                <h3><i class="ra ra-heart"></i> Status Effects</h3>
                <button class="close-modal" onclick="closeStatusEffectsModal()" style="background: transparent; border: none; color: white; font-size: 24px; cursor: pointer;">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="modal-body">
                <div style="max-height: 300px; overflow-y: auto; scrollbar-width: thin; scrollbar-color: #ffd700 rgba(255,255,255,0.1); margin-bottom: 20px;">
                    <div id="status-effects-modal-content">
                        <div style="grid-column: 1 / -1; text-align: center; color: #8a8a8a; padding: 40px;">
                            <i class="ra ra-heart" style="font-size: 3em; margin-bottom: 15px; display: block;"></i>
                            No active status effects. You're feeling healthy!
                        </div>
                    </div>
                </div>
                <div id="status-effects-form-modal-content">
                    <div class="modal-status-form-controls">
                        <h4><i class="ra ra-lightning-bolt"></i> Apply Status Effect</h4>
                        
                        <!-- Status Effect Button Grid -->
                        <div class="modal-status-effects-grid">
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('bleeding', 'Bleeding', 'ü©∏')">
                                <div class="icon">ü©∏</div>
                                <div class="name">Bleeding</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('poisoned', 'Poisoned', 'ü§¢')">
                                <div class="icon">ü§¢</div>
                                <div class="name">Poisoned</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('radiation', 'Radiation', '‚ò¢Ô∏è')">
                                <div class="icon">‚ò¢Ô∏è</div>
                                <div class="name">Radiation</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('exhausted', 'Exhausted', 'üò¥')">
                                <div class="icon">üò¥</div>
                                <div class="name">Exhausted</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('dehydrated', 'Dehydrated', 'üíß')">
                                <div class="icon">üíß</div>
                                <div class="name">Dehydrated</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('hypothermia', 'Hypothermia', 'üßä')">
                                <div class="icon">üßä</div>
                                <div class="name">Hypothermia</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('heatstroke', 'Heat Exhaustion', 'üî•')">
                                <div class="icon">üî•</div>
                                <div class="name">Heat Exhaustion</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('broken_bone', 'Broken Bone', 'ü¶¥')">
                                <div class="icon">ü¶¥</div>
                                <div class="name">Broken Bone</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('stunned', 'Stunned', '‚ö°')">
                                <div class="icon">‚ö°</div>
                                <div class="name">Stunned</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('feared', 'Feared', 'üò±')">
                                <div class="icon">üò±</div>
                                <div class="name">Feared</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('inspired', 'Inspired', '‚ú®')">
                                <div class="icon">‚ú®</div>
                                <div class="name">Inspired</div>
                            </button>
                            <button type="button" class="modal-status-btn" onclick="selectModalStatusEffect('custom', 'Custom', '‚öôÔ∏è')">
                                <div class="icon">‚öôÔ∏è</div>
                                <div class="name">Custom</div>
                            </button>
                        </div>

                        <!-- Custom Name Input (hidden by default) -->
                        <input type="text" id="modal-custom-status-name" class="status-input" placeholder="Custom effect name" style="display: none; background: rgba(40, 40, 60, 0.8); color: white; border: 1px solid rgba(255, 215, 0, 0.5); border-radius: 4px; padding: 8px; width: calc(100% - 18px); margin-bottom: 10px;">

                        <!-- Duration and Notes -->
                        <div class="status-options" style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                            <input type="number" id="modal-status-duration" class="duration-input" value="10" min="1" max="1440" style="background: rgba(40, 40, 60, 0.8); color: white; border: 1px solid rgba(255, 215, 0, 0.5); border-radius: 4px; padding: 8px; width: 80px;">
                            <span class="duration-label" style="color: #c0c0c0; font-size: 14px;">minutes</span>
                        </div>

                        <input type="text" id="modal-status-notes" class="status-notes" placeholder="Additional notes..." style="background: rgba(40, 40, 60, 0.8); color: white; border: 1px solid rgba(255, 215, 0, 0.5); border-radius: 4px; padding: 8px; width: calc(100% - 18px); margin-bottom: 15px;">

                        <button class="add-status-btn" onclick="applyModalStatusEffect()" style="background: linear-gradient(135deg, #ffd700, #ffed4a); color: #1a1a2e; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-weight: bold; width: 100%; transition: all 0.3s ease;">
                            <i class="ra ra-flask" style="margin-right: 8px;"></i>
                            Apply Effect
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Command Center Modal -->
    <div id="command-center-modal" class="modal level-up-modal-overlay" style="display: none;">
        <div class="modal-content level-up-modal-content" style="max-width: 600px; width: 90vw;">
            <div class="modal-header">
                <h3><i class="material-icons">people</i> Command Center</h3>
                <button class="close-modal" onclick="closeCommandCenterModal()" style="background: transparent; border: none; color: white; font-size: 24px; cursor: pointer;">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="command-center-modal-content">
                    <!-- Connected Players - COMMENTED OUT (replaced by player-chips-area)
                    <div class="player-selector">
                        <h5>Connected Players</h5>
                        <div class="player-list" id="modal-connected-players">
                            <div class="player-item self">
                                <div class="player-avatar">
                                    <div class="avatar-placeholder">üë§</div>
                                </div>
                                <div class="player-info">
                                    <div class="player-name" id="modal-self-player-name">You</div>
                                    <div class="player-details">Lvl: 1<br>Unknown - Unknown</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    -->
                    
                    <!-- Quick Tools -->
                    <div class="quick-tools" style="margin-top: 20px;">
                        <h5>Quick Tools</h5>
                        <div class="tools-content">
                            <!-- Image Upload Tool -->
                            <div class="quick-actions">
                                <h6>Image Upload</h6>
                                <div class="action-buttons">
                                    <button id="modal-v4-image-upload-btn" class="action-btn" title="Upload Image" style="background: linear-gradient(135deg, #6366f1, #8b5cf6); color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 14px; display: flex; align-items: center; gap: 8px;">
                                        <span>üì∑</span>
                                        <span>Upload Image</span>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Chat Effects Quick Access -->
                            <div class="effects-quick" style="margin-top: 15px;">
                                <h6>Quick Effects</h6>
                                <div class="effects-buttons" style="display: flex; gap: 8px; flex-wrap: wrap;">
                                    <button class="effect-btn" onclick="insertChatEffect(':crit:')" title="Critical Hit" style="background: rgba(255, 0, 0, 0.2); color: white; border: 1px solid rgba(255, 0, 0, 0.5); padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        ‚öîÔ∏è Crit
                                    </button>
                                    <button class="effect-btn" onclick="insertChatEffect(':magic:')" title="Magic Sparkle" style="background: rgba(138, 43, 226, 0.2); color: white; border: 1px solid rgba(138, 43, 226, 0.5); padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        ‚ú® Magic
                                    </button>
                                    <button class="effect-btn" onclick="insertChatEffect(':doom:')" title="Doom" style="background: rgba(0, 0, 0, 0.4); color: white; border: 1px solid rgba(128, 128, 128, 0.5); padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        üíÄ Doom
                                    </button>
                                    <button class="effect-btn" onclick="insertChatEffect(':dice:')" title="Dice Roll" style="background: rgba(0, 128, 0, 0.2); color: white; border: 1px solid rgba(0, 128, 0, 0.5); padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        üé≤ Dice
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="js/core/storageMigration.js"></script>
    <script src="js/core/main.js"></script>
    <script src="js/core/character-manager.js"></script>
    <script src="js/core/v4CharacterSyncManager.js"></script>
    <script src="js/core/storyTellerBridge.js"></script>
    <script src="js/core/cache-manager.js"></script>
    <script src="js/core/qr.js"></script>
    <script src="js/character-storage-diagnostic.js"></script>
    
    <!-- Mini-Game Integration -->
    <script src="miniGames/miniGameManager.js"></script>
    <script>
        // Debug: Check if miniGameManager loaded
        document.addEventListener('DOMContentLoaded', () => {
            console.log('=== MiniGameManager Debug ===');
            console.log('window.miniGameManager:', window.miniGameManager);
            console.log('typeof window.miniGameManager:', typeof window.miniGameManager);
            console.log('miniGameManager methods:', window.miniGameManager ? Object.getOwnPropertyNames(Object.getPrototypeOf(window.miniGameManager)) : 'N/A');
            
            // Test if we can call a method
            if (window.miniGameManager && typeof window.miniGameManager.launchDonutsMagicMania === 'function') {
                console.log('‚úÖ miniGameManager.launchDonutsMagicMania is available');
            } else {
                console.error('‚ùå miniGameManager.launchDonutsMagicMania is NOT available');
            }
        });
    </script>
    
    <script>
        // Theme Toggle
        function toggleTheme() {
            document.body.classList.toggle('dark-theme');
            localStorage.setItem('theme', document.body.classList.contains('dark-theme') ? 'dark' : 'light');
        }

        // Load saved theme
        if (localStorage.getItem('theme') === 'dark' ||
            (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.body.classList.add('dark-theme');
        }

        // Storage Management Functions for Player Apps
        async function refreshStorageStats() {
            try {
                let stats;
                if (window.advancedStorageManager) {
                    stats = await window.advancedStorageManager.getStorageStats();
                } else {
                    // Fallback for basic localStorage stats
                    let used = 0;
                    for (let key in localStorage) {
                        if (localStorage.hasOwnProperty(key)) {
                            used += localStorage[key].length + key.length;
                        }
                    }
                    stats = {
                        localStorage: {
                            used: used,
                            usedMB: (used / (1024 * 1024)).toFixed(2),
                            percentage: Math.round((used / (5 * 1024 * 1024)) * 100)
                        }
                    };
                }

                const statsDisplay = document.getElementById('storage-stats-display');
                if (statsDisplay) {
                    statsDisplay.innerHTML = `
                        <div style="margin-bottom: 10px;">
                            <strong>localStorage:</strong> ${stats.localStorage.usedMB}MB (${stats.localStorage.percentage}%)
                        </div>
                        <div style="margin-bottom: 10px;">
                            <strong>IndexedDB:</strong> ${stats.indexedDB?.supported ? '‚úÖ Available' : '‚ùå Not Available'}
                        </div>
                        <div>
                            <strong>Platform:</strong> ${stats.cordova?.detected ? 'üì± Cordova App' : 'üåê Web Browser'}
                        </div>
                    `;
                }

                // Update items list
                const itemsDisplay = document.getElementById('storage-items-display');
                if (itemsDisplay) {
                    let itemsHtml = '<div style="display: grid; grid-template-columns: 1fr auto; gap: 10px; align-items: center;">';
                    for (let key in localStorage) {
                        if (localStorage.hasOwnProperty(key)) {
                            const size = localStorage[key].length;
                            const sizeMB = (size / (1024 * 1024)).toFixed(3);
                            const isLarge = size > 50000;
                            
                            itemsHtml += `
                                <span style="color: var(--text-primary);">${key}</span>
                                <span style="color: ${isLarge ? 'var(--warning)' : 'var(--text-secondary)'};">${sizeMB}MB ${isLarge ? '‚ö†Ô∏è' : ''}</span>
                            `;
                        }
                    }
                    itemsHtml += '</div>';
                    itemsDisplay.innerHTML = itemsHtml;
                }
            } catch (error) {
                console.error('Storage stats error:', error);
                const statsDisplay = document.getElementById('storage-stats-display');
                if (statsDisplay) {
                    statsDisplay.innerHTML = '<div style="color: var(--error);">‚ùå Failed to load storage statistics</div>';
                }
            }
        }

        async function migratePlayerStorage() {
            try {
                if (!window.advancedStorageManager) {
                    alert('‚ùå Advanced storage manager not available');
                    return;
                }

                if (!window.storageMigration) {
                    alert('‚ùå Storage migration not available');
                    return;
                }

                const confirmMsg = 'üì¶ This will move large data to IndexedDB to free up localStorage space. Continue?';
                if (!confirm(confirmMsg)) return;

                await window.storageMigration.runMigration();
                alert('‚úÖ Migration completed successfully!');
                refreshStorageStats();
            } catch (error) {
                console.error('Migration error:', error);
                alert('‚ùå Migration failed: ' + error.message);
            }
        }

        async function cleanupPlayerStorage() {
            if (!confirm('üßπ This will migrate large data to IndexedDB and remove old cache items. Continue?')) {
                return;
            }

            try {
                if (window.storageMigration) {
                    const itemsProcessed = await window.storageMigration.emergencyCleanup();
                    alert(`üßπ Cleanup completed! Processed ${itemsProcessed} items. Characters should now load from IndexedDB.`);
                    refreshStorageStats();
                    
                    // Reload character manager to use new storage
                    if (typeof initializeCharacterManager === 'function') {
                        await initializeCharacterManager();
                    }
                } else {
                    alert('‚ùå Storage migration not available');
                }
            } catch (error) {
                console.error('Cleanup error:', error);
                alert('‚ùå Cleanup failed: ' + error.message);
            }
        }

        async function exportPlayerData() {
            try {
                const data = {};
                
                // Export localStorage data
                for (let key in localStorage) {
                    if (localStorage.hasOwnProperty(key)) {
                        try {
                            data[key] = JSON.parse(localStorage[key]);
                        } catch (e) {
                            data[key] = localStorage[key];
                        }
                    }
                }

                // Create download
                const dataStr = JSON.stringify(data, null, 2);
                const dataBlob = new Blob([dataStr], { type: 'application/json' });
                const url = URL.createObjectURL(dataBlob);
                
                const link = document.createElement('a');
                link.href = url;
                link.download = `dcc-player-backup-${new Date().toISOString().split('T')[0]}.json`;
                link.click();
                
                URL.revokeObjectURL(url);
                alert('üíæ Character data exported successfully!');
            } catch (error) {
                console.error('Export failed:', error);
                alert('‚ùå Export failed: ' + error.message);
            }
        }

        // Auto-load storage stats when storage tab is opened
        document.addEventListener('DOMContentLoaded', () => {
            // Monitor tab changes to load storage stats
            const storageTab = document.querySelector('[data-tab="storage"]');
            if (storageTab) {
                storageTab.addEventListener('click', () => {
                    setTimeout(refreshStorageStats, 100);
                });
            }
        });

        // Accent Theme System
        function setAccentTheme(themeName) {
            // Remove existing theme from both html and body
            document.documentElement.removeAttribute('data-accent-theme');
            document.body.removeAttribute('data-accent-theme');
            document.querySelectorAll('.theme-color-btn').forEach(btn => btn.classList.remove('active'));
            
            // Set new theme on both html and body
            if (themeName !== 'default') {
                document.documentElement.setAttribute('data-accent-theme', themeName);
                document.body.setAttribute('data-accent-theme', themeName);
            }
            
            // Update active button
            const activeBtn = document.querySelector(`[data-theme="${themeName}"]`);
            if (activeBtn) {
                activeBtn.classList.add('active');
            }
            
            // Save to localStorage
            localStorage.setItem('accentTheme', themeName);
        }

        // Load saved accent theme
        const savedAccentTheme = localStorage.getItem('accentTheme') || 'default';
        setAccentTheme(savedAccentTheme);

        // Initialize accent theme selectors
        document.addEventListener('DOMContentLoaded', () => {
            // Add click handlers to theme buttons
            document.querySelectorAll('.theme-color-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const themeName = btn.dataset.theme;
                    setAccentTheme(themeName);
                });
            });
        });

        // Mobile optimizations
        document.addEventListener('DOMContentLoaded', () => {
            // Prevent zoom on input focus (iOS)
            const inputs = document.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.addEventListener('focus', () => {
                    document.querySelector('meta[name="viewport"]').setAttribute('content',
                        'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
                });
                input.addEventListener('blur', () => {
                    document.querySelector('meta[name="viewport"]').setAttribute('content',
                        'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
                });
            });

            // Tab navigation
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const tabName = btn.dataset.tab;
                    switchTab(tabName);

                    // Update active states
                    document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                });
            });

            // Ability navigation
            document.querySelectorAll('.ability-nav-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const abilityName = btn.dataset.ability;

                    // Update active states
                    document.querySelectorAll('.ability-nav-btn').forEach(b => b.classList.remove('active'));
                    document.querySelectorAll('.ability-panel').forEach(p => p.classList.remove('active'));

                    btn.classList.add('active');
                    document.getElementById(`${abilityName}-content`).classList.add('active');
                });
            });

            // Portrait upload
            document.getElementById('portrait-display').addEventListener('click', () => {
                document.getElementById('portrait-upload').click();
            });
        });
    </script>

    <script src="js/core/skills.js"></script>
    <script src="js/core/improvements.js"></script>
    <script src="js/core/achievements.js"></script>
    <script src="js/core/levelSystem.js"></script>
    <!-- <script src="debug-dcc.js"></script> -->
    <script>
        // PWA Service Worker Registration - DISABLED TO PREVENT CACHING ISSUES
        /* 
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function () {
                navigator.serviceWorker.register('./sw.js')
                    .then(function (registration) {
                        console.log('DCC Character Sheet: Service Worker registered successfully:', registration.scope);
                    })
                    .catch(function (error) {
                        console.log('DCC Character Sheet: Service Worker registration failed:', error);
                    });
            });
        }
        */
        console.log('üö´ Service Worker disabled - using browser cache only for better development experience');

        // PWA Install Prompt
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;

            // Show install button
            const installBtn = document.createElement('button');
            installBtn.textContent = 'üì± Install App';
            installBtn.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 10000;
            background: #ff6b35;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        `;
            installBtn.onclick = () => {
                deferredPrompt.prompt();
                deferredPrompt.userChoice.then((choiceResult) => {
                    if (choiceResult.outcome === 'accepted') {
                        console.log('User accepted the install prompt');
                    }
                    deferredPrompt = null;
                    installBtn.remove();
                });
            };
            document.body.appendChild(installBtn);
        });
    </script>

    <!-- Network Integration Scripts -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <script src="js/core/supabaseUrlEncoder.js"></script>
    <script src="js/core/supabase-config.js"></script>
    
    <!-- Essential modules for chat system -->
    <script src="js/modules/dccMechanics.js"></script>
    <script src="js/modules/rollCalculator.js"></script>
    <script src="js/modules/jsonDataLoader.js"></script>
    <script src="js/modules/dccUtilities.js"></script>
    <script src="js/modules/chatCommandParser.js"></script>
    
    <!-- Inventory and Storage System -->
    <script src="js/modules/advancedStorageManager.js"></script>
    <script src="js/modules/inventoryManager.js"></script>
    
    <!-- Image Hosting System -->
    <script src="js/githubTokenStorage.js"></script>
    <script src="js/githubImageHost.js"></script>
    <script src="js/multiImageHost.js"></script>
    <script src="js/chatImageSystem.js"></script>
    <script src="js/githubImageTesting.js"></script>
    <script src="js/githubImageAutoInit.js"></script>
    <script src="js/avatarAssignmentSystem.js"></script>
    <script src="js/avatarUrlSystem.js"></script>
    <script src="js/characterAvatarMigration.js"></script>
    
    <!-- Maps System -->
    <script src="js/unified-storage-db.js"></script>
    <script src="js/maps-manager.js"></script>
    <script src="js/MapSyncManager.js"></script>
    <script src="js/MapSyncAdapter.js"></script>
    <script src="js/PlayerMapViewer.js"></script>
    <script src="js/PlayerMapViewerCanvas.js"></script>
    <script src="js/PlayerMapViewerCSS.js"></script>
    <script src="js/PlayerMapViewerLocal.js"></script>
    <script src="js/MapDataFormatter.js"></script>
    <script src="js/SimpleMapRenderer.js"></script>
    <script src="js/MapClientManager.js"></script>
    <script src="js/PlayerPositionTracker.js"></script>
    <script src="js/StorytellerIntegration.js"></script>
    
    <script src="js/command-interceptor.js"></script>
    <script src="js/modules/chatEffectsManager.js"></script>
    <script src="js/modules/emojiProcessor.js"></script>
    
    <!-- Shared Chat Picker System -->
    <script src="../shared-modules/chatPickerManager.js"></script>
    <script src="../shared-modules/v4NetworkChatPickerIntegration.js"></script>
    
    <script src="js/core/supabase-chat.js"></script>
    <!-- OLD PubNub system disabled - using Supabase instead -->
    <!-- <script src="js/realtime-chat.js"></script> -->
    
    <!-- Network Integration Functions -->
    <script>
        // Network integration variables
        let isNetworkConnected = false;
        let currentSessionCode = '';
        let networkPlayerName = '';

        // Set network player name (called by character manager)
        function setNetworkPlayerName(playerName) {
            networkPlayerName = playerName;
            console.log('üé≠ Network player name set to:', playerName);
        }
        window.setNetworkPlayerName = setNetworkPlayerName;

        // ========================================
        // CONNECTION URL STORAGE MANAGEMENT
        // ========================================
        
        /**
         * Save connection URL to both localStorage and IndexedDB
         * @param {string} url - The connection URL to save
         */
        async function saveConnectionUrl(url) {
            if (!url) return;
            
            try {
                // Save to localStorage for immediate access
                localStorage.setItem('lastConnectionUrl', url);
                console.log('üíæ Connection URL saved to localStorage:', url);
                
                // Save to IndexedDB for persistent backup
                if (window.advancedStorageManager) {
                    await window.advancedStorageManager.setItem('lastConnectionUrl', url);
                    console.log('üíæ Connection URL saved to IndexedDB:', url);
                }
            } catch (error) {
                console.error('‚ùå Failed to save connection URL:', error);
            }
        }
        
        /**
         * Get connection URL with fallback from localStorage to IndexedDB
         * @returns {Promise<string|null>} The connection URL or null if not found
         */
        async function getConnectionUrl() {
            try {
                // Try localStorage first (faster)
                let url = localStorage.getItem('lastConnectionUrl');
                if (url) {
                    // Check if localStorage has corrupted JSON format
                    if (url.startsWith('{"compressed":') && url.includes('"data":"')) {
                        console.log('ÔøΩ Detected corrupted JSON in localStorage, cleaning up...');
                        url = cleanupCorruptedUrl(url);
                        if (url) {
                            // Re-save the cleaned URL
                            await saveConnectionUrl(url);
                            console.log('ÔøΩüì° Cleaned and re-saved URL from localStorage:', url);
                            return url;
                        }
                    } else {
                        console.log('üì° Connection URL loaded from localStorage:', url);
                        return url;
                    }
                }
                
                // Fallback to IndexedDB
                if (window.advancedStorageManager) {
                    const indexedData = await window.advancedStorageManager.getItem('lastConnectionUrl');
                    if (indexedData) {
                        console.log('üîç Raw IndexedDB data:', indexedData);
                        
                        // Handle various data formats from IndexedDB
                        let url;
                        
                        if (typeof indexedData === 'string') {
                            // Check if it's corrupted JSON string
                            if (indexedData.startsWith('{"compressed":') && indexedData.includes('"data":"')) {
                                console.log('üîß Detected corrupted JSON in IndexedDB string, cleaning up...');
                                url = cleanupCorruptedUrl(indexedData);
                            } else {
                                // Already a clean string
                                url = indexedData;
                            }
                        } else if (indexedData && typeof indexedData === 'object') {
                            if (indexedData.compressed !== undefined && indexedData.data !== undefined) {
                                // Handle compressed format: {"compressed":false,"data":"\"actual-url\""}
                                url = indexedData.data;
                                console.log('üîç Extracted data property:', url);
                                
                                // Remove extra JSON quotes if present
                                if (typeof url === 'string') {
                                    if (url.startsWith('"') && url.endsWith('"')) {
                                        url = url.slice(1, -1);
                                        console.log('üîç Removed JSON quotes:', url);
                                    }
                                }
                            } else {
                                // Try to extract URL from object properties
                                console.warn('‚ö†Ô∏è Unexpected IndexedDB object format:', indexedData);
                                url = indexedData.url || indexedData.value || indexedData.lastConnectionUrl;
                            }
                        } else {
                            console.warn('‚ö†Ô∏è Unexpected IndexedDB data type:', typeof indexedData, indexedData);
                            return null;
                        }
                        
                        // Final validation and cleanup
                        if (url && typeof url === 'string') {
                            // Check if it's still corrupted JSON
                            if (url.startsWith('{"compressed":') && url.includes('"data":"')) {
                                console.log('üîß Detected corrupted JSON in extracted URL, cleaning up...');
                                url = cleanupCorruptedUrl(url);
                            }
                            
                            // Validate the final URL format
                            if (url && (url.includes('.sc?s=') || url.includes('supabase'))) {
                                console.log('üì° Connection URL loaded from IndexedDB:', url);
                                // Re-save both to localStorage and IndexedDB to fix corruption
                                await saveConnectionUrl(url);
                                console.log('üîß Re-saved cleaned URL to both storages');
                                return url;
                            } else {
                                console.warn('‚ö†Ô∏è Invalid URL format after cleanup:', url);
                                return null;
                            }
                        }
                    }
                }
                
                console.log('üì° No saved connection URL found');
                return null;
            } catch (error) {
                console.error('‚ùå Failed to get connection URL:', error);
                console.error('Error details:', error.message, error.stack);
                return null;
            }
        }
        
        /**
         * Clean up corrupted JSON format and extract the actual URL
         * @param {string} corruptedUrl - The corrupted JSON string
         * @returns {string|null} The cleaned URL or null if extraction fails
         */
        function cleanupCorruptedUrl(corruptedUrl) {
            try {
                console.log('üßπ Cleaning corrupted URL:', corruptedUrl);
                
                // Handle format: {"compressed":false,"data":"\"skddvbmxzeprvxfslhlk.sc?s=BRADTEST\""}
                if (corruptedUrl.startsWith('{"compressed":') && corruptedUrl.includes('"data":"')) {
                    // Parse the JSON
                    const parsed = JSON.parse(corruptedUrl);
                    if (parsed && parsed.data) {
                        let cleanUrl = parsed.data;
                        
                        // Remove extra JSON quotes if present
                        if (typeof cleanUrl === 'string' && cleanUrl.startsWith('"') && cleanUrl.endsWith('"')) {
                            cleanUrl = cleanUrl.slice(1, -1);
                        }
                        
                        console.log('üßπ Cleaned URL result:', cleanUrl);
                        return cleanUrl;
                    }
                }
                
                // If above doesn't work, try regex extraction
                const match = corruptedUrl.match(/"data":"\\?"([^"\\]+(?:\\.[^"\\]*)*)"\\?"/);
                if (match && match[1]) {
                    const cleanUrl = match[1].replace(/\\"/g, '"');
                    console.log('üßπ Regex extracted URL:', cleanUrl);
                    return cleanUrl;
                }
                
                console.warn('‚ö†Ô∏è Could not clean corrupted URL');
                return null;
            } catch (error) {
                console.error('‚ùå Error cleaning corrupted URL:', error);
                return null;
            }
        }
        
        // Make functions available globally
        window.saveConnectionUrl = saveConnectionUrl;
        window.getConnectionUrl = getConnectionUrl;
        window.cleanupCorruptedUrl = cleanupCorruptedUrl;

        // Show creation tab (called by New Character button)
        function showCreationTab() {
            const creationTab = document.querySelector('[data-tab="creation"]');
            if (creationTab) {
                creationTab.style.display = 'flex';
                // Switch to creation tab
                switchTab('creation');
            }
        }
        window.showCreationTab = showCreationTab;

        // Initialize network integration when page loads
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('üåê V4-Network: Initializing network features...');
            
            // Check for session code in URL first
            const urlParams = new URLSearchParams(window.location.search);
            const sessionFromUrl = urlParams.get('session');
            
            if (sessionFromUrl) {
                document.getElementById('session-code-input').value = sessionFromUrl;
                // Also populate the sheet session input
                const sheetSessionInput = document.getElementById('sheet-session-input');
                if (sheetSessionInput) {
                    sheetSessionInput.value = sessionFromUrl;
                }
                console.log('üìé Session code found in URL:', sessionFromUrl);
            } else {
                // Load last saved connection URL with IndexedDB fallback
                const lastUrl = await getConnectionUrl();
                if (lastUrl) {
                    document.getElementById('session-code-input').value = lastUrl;
                    // Also populate the sheet session input
                    const sheetSessionInput = document.getElementById('sheet-session-input');
                    if (sheetSessionInput) {
                        sheetSessionInput.value = lastUrl;
                    }
                    console.log('üìé Loaded saved connection URL:', lastUrl);
                }
            }
            
            // Show session connection area by default (not connected on load)
            document.querySelector('.session-connection').style.display = 'block';
            
            // Hide connection toggle button on load
            document.getElementById('connection-toggle').style.display = 'none';
            
            // Set up player click handlers for NOTE functionality
            setupPlayerClickHandlers();
            
            // Set up notification button click handler
            const notesBtn = document.getElementById('notes-notification');
            if (notesBtn) {
                notesBtn.addEventListener('click', () => {
                    // Open the main notes panel
                    showTab('notes');
                    // Scroll to private messages section
                    setTimeout(() => {
                        const messagesSection = document.getElementById('private-messages-container');
                        if (messagesSection) {
                            messagesSection.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        }
                    }, 100);
                });
            }
            
            // Test notification system
            console.log('üß™ Testing notification system...');
            const testContainer = document.getElementById('notification-container');
            console.log('üß™ Notification container found:', !!testContainer);
            if (typeof showNotification === 'function') {
                console.log('üß™ showNotification function available');
                // Test attribute roll notification - DISABLED
                /*
                setTimeout(() => {
                    console.log('üß™ Testing notification display...');
                    showNotification('roll', 'Test Notification', 'This is a test', 'Testing notification system');
                }, 2000);
                */
            } else {
                console.error('üß™ showNotification function not found');
            }
            
            // Test click handlers after a delay to ensure player list is populated
            setTimeout(() => {
                console.log('üß™ Testing clickable player names...');
                const clickableNames = document.querySelectorAll('.clickable-player-name');
                console.log('üß™ Found clickable names:', clickableNames.length);
                clickableNames.forEach((name, index) => {
                    console.log(`üß™ Clickable name ${index}:`, name.textContent, 'data-player-name:', name.getAttribute('data-player-name'));
                });
            }, 5000);
        });

        // Toggle connection area visibility
        function toggleConnectionArea() {
            const connectionArea = document.querySelector('.session-connection');
            const toggleBtn = document.getElementById('connection-toggle');
            
            if (connectionArea.style.display === 'none') {
                connectionArea.style.display = 'block';
                toggleBtn.style.display = 'none';
            } else {
                connectionArea.style.display = 'none';
                if (isNetworkConnected) {
                    toggleBtn.style.display = 'block';
                }
            }
        }

        // Notification system helpers (for future features)
        function showNotificationIcon(type) {
            const notificationBtn = document.getElementById(`${type}-notification`);
            if (notificationBtn) {
                notificationBtn.style.display = 'flex';
                console.log(`üì¢ ${type} notification icon shown`);
            }
        }

        function hideNotificationIcon(type) {
            const notificationBtn = document.getElementById(`${type}-notification`);
            if (notificationBtn) {
                notificationBtn.style.display = 'none';
                console.log(`üì¢ ${type} notification icon hidden`);
            }
        }

        // Example usage for testing notifications (can be called from console)
        function testNotifications() {
            setTimeout(() => showNotificationIcon('notes'), 2000);
            setTimeout(() => showNotificationIcon('dice'), 4000);
            setTimeout(() => showNotificationIcon('map'), 6000);
            console.log('üß™ Test notification icons will appear in 2, 4, and 6 seconds');
        }

        // Make test function globally available
        window.testNotifications = testNotifications;

        // Command Center functions
        function toggleCommandCenter() {
            // Legacy function - kept for compatibility
            // Now opens the modal instead
            toggleCommandCenterModal();
        }

        function toggleCommandCenterModal() {
            const modal = document.getElementById('command-center-modal');
            if (modal.style.display === 'none' || modal.style.display === '') {
                showCommandCenterModal();
            } else {
                closeCommandCenterModal();
            }
        }

        function showCommandCenterModal() {
            const modal = document.getElementById('command-center-modal');
            
            // Sync the modal player list with the main one
            syncModalPlayerList();
            
            // Show the modal
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
            
            // Set up image upload button in modal
            const modalImageBtn = document.getElementById('modal-v4-image-upload-btn');
            const originalImageBtn = document.getElementById('v4-image-upload-btn');
            if (modalImageBtn && originalImageBtn) {
                modalImageBtn.onclick = originalImageBtn.onclick;
            }
            
            console.log('Command Center modal opened');
        }

        function closeCommandCenterModal() {
            const modal = document.getElementById('command-center-modal');
            modal.style.display = 'none';
            document.body.style.overflow = '';
            console.log('Command Center modal closed');
        }

        function syncModalPlayerList() {
            // DEPRECATED: The modal player list has been replaced by player-chips-area
            // This function is kept for compatibility but no longer performs any actions
            console.log('üìù syncModalPlayerList called but modal player list is deprecated');
            return;
            
            /*
            const originalPlayerList = document.getElementById('connected-players');
            const modalPlayerList = document.getElementById('modal-connected-players');
            
            if (originalPlayerList && modalPlayerList) {
                // Copy the player list content to the modal
                modalPlayerList.innerHTML = originalPlayerList.innerHTML;
                
                // Update the self player name
                const modalSelfName = document.getElementById('modal-self-player-name');
                const originalSelfName = document.getElementById('self-player-name');
                if (modalSelfName && originalSelfName) {
                    modalSelfName.textContent = originalSelfName.textContent;
                }
            }
            */
        }

        // Close modal when clicking outside of it
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('command-center-modal');
            if (event.target === modal) {
                closeCommandCenterModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const modal = document.getElementById('command-center-modal');
                if (modal.style.display === 'flex') {
                    closeCommandCenterModal();
                }
            }
        });

        function quickDiceRoll() {
            const roll = Math.floor(Math.random() * 20) + 1;
            const message = `üé≤ Quick d20 roll: **${roll}** :dice:`;
            
            if (isNetworkConnected) {
                sendChatMessageDirect(message);
            } else {
                addChatMessage(message, 'system', 'Dice');
            }
        }

        function showChatEffects() {
            // This will be implemented when we add the effects picker
            console.log('Chat effects picker would open here');
            alert('Chat effects picker coming soon! For now, try typing :crit:, :magic:, :doom:, or :dice: in your messages.');
        }

        function sendEmoji(emoji) {
            if (isNetworkConnected) {
                sendChatMessageDirect(emoji);
            } else {
                addChatMessage(emoji, 'player', networkPlayerName || 'You');
            }
        }

        function insertChatEffect(effect) {
            const chatInput = document.getElementById('chat-input');
            const currentText = chatInput.value;
            
            // Insert effect at cursor position or append to end
            const cursorPos = chatInput.selectionStart;
            const before = currentText.substring(0, cursorPos);
            const after = currentText.substring(cursorPos);
            
            // Add space before effect if needed
            const prefix = (before && !before.endsWith(' ')) ? ' ' : '';
            const suffix = (after && !after.startsWith(' ')) ? ' ' : '';
            
            chatInput.value = before + prefix + effect + suffix + after;
            chatInput.focus();
            
            // Position cursor after the inserted effect
            const newPos = cursorPos + prefix.length + effect.length + suffix.length;
            chatInput.setSelectionRange(newPos, newPos);
        }

        // ========================================
        // FAB + BOTTOM SHEET CHAT FUNCTIONS
        // ========================================

        // Expandable FAB functionality
        let fabExpanded = false;
        let longPressTimer = null;
        let isLongPress = false;
        const LONG_PRESS_DURATION = 600; // 600ms for long press

        function handleFABClick(event) {
            console.log('FAB Click:', event ? event.type : 'no event', 'isLongPress:', isLongPress);
            
            // If this was triggered by a long press, ignore the click
            if (isLongPress) {
                isLongPress = false; // Reset flag
                return;
            }
            
            if (fabExpanded) {
                // If expanded, collapse first
                toggleFABExpansion();
            } else {
                // Normal click - open chat
                toggleChatBottomSheet();
            }
        }

        function toggleFABExpansion(event) {
            console.log('üîÑ Toggle FAB Expansion - Current state:', fabExpanded);
            if (event) {
                event.preventDefault(); // Prevent context menu
                event.stopPropagation();
            }
            
            const container = document.getElementById('fab-container');
            const ironTangleFab = document.getElementById('iron-tangle-fab');
            const donutsMagicManiaFab = document.getElementById('donuts-magic-mania-fab');
            
            console.log('üìã Elements found:', {
                container: !!container,
                ironTangleFab: !!ironTangleFab,
                donutsMagicManiaFab: !!donutsMagicManiaFab
            });
            
            // Visual debugging - flash the container red if elements missing
            if (!container || !ironTangleFab || !donutsMagicManiaFab) {
                document.body.style.backgroundColor = '#660000';
                setTimeout(() => {
                    document.body.style.backgroundColor = '';
                }, 500);
                return;
            }
            
            fabExpanded = !fabExpanded;
            
            if (fabExpanded) {
                container.classList.add('expanded');
                ironTangleFab.classList.add('show');
                donutsMagicManiaFab.classList.add('show');
                console.log('‚úÖ FAB expanded - Classes added');
                console.log('üìä Container classes:', container.className);
                console.log('üöÇ Iron Tangle classes:', ironTangleFab.className);
                console.log('üç© Donuts classes:', donutsMagicManiaFab.className);
                
                // Visual debugging - make mini-game FABs temporarily more visible
                ironTangleFab.style.border = '3px solid red';
                donutsMagicManiaFab.style.border = '3px solid red';
                // Force visibility for debugging
                ironTangleFab.style.opacity = '1';
                ironTangleFab.style.transform = 'scale(1)';
                ironTangleFab.style.zIndex = '9999';
                donutsMagicManiaFab.style.opacity = '1';
                donutsMagicManiaFab.style.transform = 'scale(1)';
                donutsMagicManiaFab.style.zIndex = '9999';
                setTimeout(() => {
                    ironTangleFab.style.border = '';
                    donutsMagicManiaFab.style.border = '';
                    // Keep forced visibility for now
                }, 2000);
            } else {
                container.classList.remove('expanded');
                ironTangleFab.classList.remove('show');
                donutsMagicManiaFab.classList.remove('show');
                console.log('‚ùå FAB collapsed - Classes removed');
            }
        }

        // Touch and Mouse event handlers for long press
        function setupFABTouchEvents() {
            const chatFab = document.getElementById('chat-fab');
            let touchStartTime = 0;
            let mouseStartTime = 0;
            
            // Remove any existing event listeners first
            chatFab.removeEventListener('touchstart', handleTouchStart);
            chatFab.removeEventListener('touchend', handleTouchEnd);
            chatFab.removeEventListener('touchcancel', handleTouchCancel);
            chatFab.removeEventListener('mousedown', handleMouseDown);
            chatFab.removeEventListener('mouseup', handleMouseUp);
            chatFab.removeEventListener('mouseleave', handleMouseLeave);
            chatFab.removeEventListener('contextmenu', handleContextMenu);
            
            // === TOUCH EVENTS (Mobile) ===
            function handleTouchStart(e) {
                console.log('Touch start');
                touchStartTime = Date.now();
                isLongPress = false;
                
                longPressTimer = setTimeout(() => {
                    console.log('Long press triggered (touch)');
                    isLongPress = true;
                    toggleFABExpansion();
                    // Add haptic feedback if available
                    if (navigator.vibrate) {
                        navigator.vibrate(50);
                    }
                    // Visual feedback for mobile debugging
                    document.body.style.backgroundColor = '#004400';
                    setTimeout(() => {
                        document.body.style.backgroundColor = '';
                    }, 200);
                }, LONG_PRESS_DURATION);
            }

            function handleTouchEnd(e) {
                console.log('Touch end');
                if (longPressTimer) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
                
                // Small delay to let the long press flag be processed
                if (isLongPress) {
                    e.preventDefault();
                    e.stopPropagation();
                    setTimeout(() => {
                        isLongPress = false;
                    }, 100);
                }
            }
            
            function handleTouchCancel(e) {
                console.log('Touch cancel');
                if (longPressTimer) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
                isLongPress = false;
            }

            // === MOUSE EVENTS (Desktop) ===
            function handleMouseDown(e) {
                console.log('Mouse down', e.button);
                // Only handle left mouse button for long press
                if (e.button === 0) {
                    mouseStartTime = Date.now();
                    isLongPress = false;
                    
                    longPressTimer = setTimeout(() => {
                        console.log('Long press triggered (mouse)');
                        isLongPress = true;
                        toggleFABExpansion();
                        // Visual feedback for debugging
                        document.body.style.backgroundColor = '#004400';
                        setTimeout(() => {
                            document.body.style.backgroundColor = '';
                        }, 200);
                    }, LONG_PRESS_DURATION);
                }
            }

            function handleMouseUp(e) {
                console.log('Mouse up', e.button);
                if (e.button === 0) { // Left mouse button
                    if (longPressTimer) {
                        clearTimeout(longPressTimer);
                        longPressTimer = null;
                    }
                    
                    // Small delay to let the long press flag be processed
                    if (isLongPress) {
                        e.preventDefault();
                        e.stopPropagation();
                        setTimeout(() => {
                            isLongPress = false;
                        }, 100);
                    }
                }
            }

            function handleMouseLeave(e) {
                console.log('Mouse leave');
                if (longPressTimer) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
                isLongPress = false;
            }

            function handleContextMenu(e) {
                // Allow right-click to also trigger expansion
                console.log('Context menu (right click)');
                e.preventDefault();
                toggleFABExpansion();
            }
            
            // Add the event listeners
            // Touch events (mobile)
            chatFab.addEventListener('touchstart', handleTouchStart, { passive: true });
            chatFab.addEventListener('touchend', handleTouchEnd, { passive: false });
            chatFab.addEventListener('touchcancel', handleTouchCancel, { passive: true });
            
            // Mouse events (desktop)
            chatFab.addEventListener('mousedown', handleMouseDown, { passive: false });
            chatFab.addEventListener('mouseup', handleMouseUp, { passive: false });
            chatFab.addEventListener('mouseleave', handleMouseLeave, { passive: true });
            chatFab.addEventListener('contextmenu', handleContextMenu, { passive: false });
        }

        // Close expanded FAB when clicking outside
        document.addEventListener('click', (e) => {
            if (fabExpanded && !e.target.closest('.fab-container')) {
                toggleFABExpansion();
            }
        });

        // Open Iron Tangle mini-game using miniGameManager
        function openIronTangle() {
            console.log('openIronTangle called');
            console.log('window.miniGameManager available:', !!window.miniGameManager);
            
            // Close the expanded FAB
            if (fabExpanded) {
                toggleFABExpansion();
            }
            
            // Use the miniGameManager to launch Iron Tangle
            if (window.miniGameManager) {
                console.log('Launching Iron Tangle via miniGameManager');
                window.miniGameManager.launchIronTangle();
            } else {
                console.error('MiniGameManager not available - falling back to new window');
                // Fallback: open in new window
                window.open('./miniGames/ironTangle/ironTangle.html', '_blank');
            }
        }

        // Open Donut's Magic Mania mini-game using miniGameManager
        function openDonutsMagicMania() {
            console.log('openDonutsMagicMania called');
            console.log('window.miniGameManager available:', !!window.miniGameManager);
            console.log('typeof miniGameManager:', typeof window.miniGameManager);
            
            // Close the expanded FAB
            if (fabExpanded) {
                toggleFABExpansion();
            }
            
            // Use the miniGameManager to launch Donut's Magic Mania
            if (window.miniGameManager) {
                console.log('Launching via miniGameManager');
                window.miniGameManager.launchDonutsMagicMania();
            } else {
                console.error('MiniGameManager not available - falling back to new window');
                console.log('Available on window:', Object.keys(window).filter(k => k.includes('mini')));
                // Fallback: open in new window
                window.open('./miniGames/donutsMagicMania/donutsMagicMania.html', '_blank');
            }
        }

        // ============================================
        // FERAL GATEWAY FUNCTIONS
        // ============================================
        
        function toggleFeralGateway() {
            const feralFab = document.getElementById('feralGatewayFab');
            feralFab.classList.toggle('active');
            
            // Add haptic feedback on mobile
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }
        }

        // Close Feral Gateway when clicking outside
        document.addEventListener('click', (e) => {
            const isClickInsideFab = e.target.closest('#feralGatewayFab');
            const isClickInsideConstellation = e.target.closest('.constellation-map');
            
            if (!isClickInsideFab) {
                const fab = document.getElementById('feralGatewayFab');
                if (fab) {
                    fab.classList.remove('active');
                }
            }
            
            // Close constellation when clicking outside
            if (!isClickInsideConstellation && e.target.closest('.constellation-overlay')) {
                closeGamesConstellation();
            }
        });

        // Tab Navigation Functions
        function openCharacterTab() {
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            // Switch to character tab
            const characterTab = document.querySelector('[data-tab="character"]');
            if (characterTab) {
                characterTab.click();
            }
        }

        // Track if maps viewer is currently open
        window.mapsViewerOpen = false;

        function openMapsView(autoDisplay = false) {
            // Prevent multiple instances
            if (window.mapsViewerOpen && !autoDisplay) {
                console.log('üó∫Ô∏è Maps viewer already open, focusing existing viewer');
                return;
            }
            
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            console.log('üó∫Ô∏è Maps view requested' + (autoDisplay ? ' (auto-display)' : ''));
            
            // Initialize MapsManager if not already done
            if (!window.mapsManager) {
                console.log('üìã Initializing MapsManager...');
                window.mapsManager = new MapsManager();
                window.mapsManager.initialize().then(() => {
                    console.log('‚úÖ MapsManager initialized');
                    showMapsInterface(autoDisplay);
                }).catch(error => {
                    console.error('‚ùå Failed to initialize MapsManager:', error);
                    if (!autoDisplay) {
                        alert('Error loading maps system: ' + error.message);
                    }
                });
            } else {
                showMapsInterface(autoDisplay);
            }
        }

        // Auto-display maps when MAP_SYNC arrives (called from command interceptor)
        window.autoDisplayMaps = function() {
            console.log('üöÄ Auto-displaying maps due to MAP_SYNC');
            
            // Show map notification button
            const mapNotification = document.getElementById('map-notification');
            if (mapNotification) {
                mapNotification.style.display = 'block';
                console.log('üó∫Ô∏è Map notification button shown');
            }
            
            showMapOverlay();
            openMapsView(true);
        };

        // Show the map overlay
        window.showMapOverlay = function() {
            console.log('üó∫Ô∏è Showing map overlay');
            const overlay = document.getElementById('map-overlay');
            if (overlay) {
                overlay.style.display = 'flex';
                window.mapsViewerOpen = true;
                
                // Force canvas resize after overlay becomes visible
                setTimeout(() => {
                    const canvas = document.getElementById('map-canvas');
                    const container = document.getElementById('map-viewer-container');
                    if (canvas && container) {
                        const rect = container.getBoundingClientRect();
                        console.log('üîß Resizing canvas to container:', rect.width, 'x', rect.height);
                        
                        // Set canvas actual size
                        canvas.width = rect.width;
                        canvas.height = rect.height;
                        
                        // Force mapViewer to re-render if available
                        if (window.mapSyncAdapter && window.mapSyncAdapter.mapClientManager && window.mapSyncAdapter.mapClientManager.mapViewer) {
                            console.log('üîÑ Triggering map re-render...');
                            window.mapSyncAdapter.mapClientManager.mapViewer.setupCanvas();
                            
                            // Re-render current map if exists
                            if (window.mapSyncAdapter.mapClientManager.mapViewer.currentMapData) {
                                window.mapSyncAdapter.mapClientManager.mapViewer.renderCurrentMap();
                            }
                        }
                    }
                }, 100); // Small delay to ensure overlay is visible
            }
        };

        // Hide the map overlay
        window.hideMapOverlay = function() {
            console.log('üó∫Ô∏è Hiding map overlay');
            const overlay = document.getElementById('map-overlay');
            if (overlay) {
                overlay.style.display = 'none';
                window.mapsViewerOpen = false;
            }
        };

        // Console test functions for debugging
        window.showMap = function() {
            console.log('üó∫Ô∏è Manual showMap() called');
            showMapOverlay();
        };

        window.testMapNotification = function() {
            console.log('üîî Testing map notification');
            const mapNotification = document.getElementById('map-notification');
            if (mapNotification) {
                mapNotification.style.display = 'block';
                console.log('‚úÖ Map notification shown');
            } else {
                console.log('‚ùå Map notification element not found');
            }
        };

        window.debugMapSystem = function() {
            console.log('üîç Map System Debug Info:');
            console.log('mapSyncAdapter:', window.mapSyncAdapter);
            console.log('mapsManager:', window.mapsManager);
            console.log('mapClientManager:', window.mapSyncAdapter?.mapClientManager);
            console.log('Map notification element:', document.getElementById('map-notification'));
            console.log('Map overlay element:', document.getElementById('map-overlay'));
            console.log('Map canvas element:', document.getElementById('map-canvas'));
        };

        // Force check for existing maps and display them
        window.checkAndShowMap = function() {
            console.log('üîÑ Manually checking for existing maps...');
            if (window.mapSyncAdapter && window.mapSyncAdapter.mapClientManager) {
                window.mapSyncAdapter.mapClientManager.checkForExistingMap();
                setTimeout(() => {
                    showMapOverlay();
                    testMapNotification();
                }, 1000);
            } else {
                console.log('‚ùå Map sync adapter not available');
            }
        };

        // Reset maps viewer state when switching between tabs or closing modals
        document.addEventListener('click', function(event) {
            // Reset when clicking on tab navigation
            if (event.target.closest('[data-tab]') || event.target.classList.contains('tab-button')) {
                window.mapsViewerOpen = false;
            }
            // Reset when closing modals (but not our map overlay close button)
            if ((event.target.classList.contains('close-modal') || event.target.closest('.close-modal')) 
                && !event.target.closest('#map-overlay')) {
                window.mapsViewerOpen = false;
            }
        });

        // Also reset on Escape key (common modal close behavior)
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                hideMapOverlay();
            }
        });
        
        function showMapsInterface(autoDisplay = false) {
            // Mark maps viewer as open
            window.mapsViewerOpen = true;
            
            // Check if there are any maps available
            if (window.mapsManager && window.mapsManager.savedMaps.size > 0) {
                // Show available maps
                const mapsList = Array.from(window.mapsManager.savedMaps.keys());
                const mapNames = mapsList.join(', ');
                
                if (!autoDisplay) {
                    alert(`Available maps: ${mapNames}\n\nClick OK to display the most recent map.`);
                } else {
                    console.log(`üó∫Ô∏è Auto-displaying map from available: ${mapNames}`);
                }
                
                // Display the most recent map
                const latestMapId = mapsList[mapsList.length - 1];
                const latestMap = window.mapsManager.savedMaps.get(latestMapId);
                if (latestMap) {
                    console.log('üìç Displaying latest map:', latestMap.name);
                    // For now, let's just log the map data
                    console.log('Map data:', latestMap);
                    
                    // TODO: Create a proper map display modal/panel
                    // window.mapsManager.displayMapInViewer(latestMap);
                }
            } else {
                if (!autoDisplay) {
                    alert('No maps available. Send a map from StoryTeller first.');
                } else {
                    console.log('üîç Auto-display triggered but no maps available yet');
                }
                // Reset the viewer state if no maps
                window.mapsViewerOpen = false;
            }
        }

        function openInventoryTab() {
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            // Switch to inventory tab
            const inventoryTab = document.querySelector('[data-tab="inventory"]');
            if (inventoryTab) {
                inventoryTab.click();
            }
        }

        function openMagicTab() {
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            // Switch to magic tab
            const magicTab = document.querySelector('[data-tab="magic"]');
            if (magicTab) {
                magicTab.click();
            }
        }

        function openNotesTab() {
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            // Switch to notes tab
            const notesTab = document.querySelector('[data-tab="notes"]');
            if (notesTab) {
                notesTab.click();
            }
        }

        function openStorageTab() {
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            // Switch to storage tab
            const storageTab = document.querySelector('[data-tab="storage"]');
            if (storageTab) {
                storageTab.click();
            }
        }

        function openReferenceTab() {
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            // Switch to reference tab
            const referenceTab = document.querySelector('[data-tab="reference"]');
            if (referenceTab) {
                referenceTab.click();
            }
        }

        function openChatBottomSheet() {
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            // Open the chat bottom sheet
            const sheet = document.getElementById('chat-bottom-sheet');
            if (sheet && !sheet.classList.contains('open')) {
                sheet.classList.add('open');
            }
        }

        function openMiniGamesModule() {
            const feralFab = document.getElementById('feralGatewayFab');
            if (feralFab) feralFab.classList.remove('active');
            
            // Open the constellation map instead of simple dialog
            const constellation = document.getElementById('gamesConstellation');
            constellation.style.display = 'flex';
            setTimeout(() => {
                constellation.classList.add('active');
            }, 50);
            
            // Add haptic feedback
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }
        }

        function closeGamesConstellation() {
            const constellation = document.getElementById('gamesConstellation');
            constellation.classList.remove('active');
            setTimeout(() => {
                constellation.style.display = 'none';
            }, 500);
        }

        function launchIronTangle() {
            closeGamesConstellation();
            // Use miniGameManager if available
            if (window.miniGameManager) {
                console.log('Launching Iron Tangle via miniGameManager');
                window.miniGameManager.launchIronTangle();
            } else {
                console.log('Launching Iron Tangle via openIronTangle fallback');
                openIronTangle();
            }
        }

        function launchDonutsMagicMania() {
            closeGamesConstellation();
            // Use miniGameManager if available
            if (window.miniGameManager) {
                console.log('Launching Donuts Magic Mania via miniGameManager');
                window.miniGameManager.launchDonutsMagicMania();
            } else {
                console.log('Launching Donuts Magic Mania via openDonutsMagicMania fallback');
                openDonutsMagicMania();
            }
        }

        function launchKatiasTrainingRoom() {
            closeGamesConstellation();
            // Use miniGameManager if available
            if (window.miniGameManager) {
                console.log('Launching Katias Training Room via miniGameManager');
                window.miniGameManager.launchKatiasTrainingRoom();
            } else {
                console.log('miniGameManager not available for Katias Training Room');
            }
        }

        // Themes Constellation Functions
        function openThemesModule() {
            // Hide Feral Gateway and show themes constellation
            const feralGateway = document.getElementById('feralGatewayFab');
            const themesConstellation = document.getElementById('themesConstellation');
            
            feralGateway.classList.remove('expanded');
            themesConstellation.classList.add('active');
            
            // Add haptic feedback if available
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }
        }

        function closeThemesConstellation() {
            const themesConstellation = document.getElementById('themesConstellation');
            const feralGateway = document.getElementById('feralGatewayFab');
            
            themesConstellation.classList.remove('active');
            // Return to Feral Gateway
            setTimeout(() => {
                feralGateway.classList.add('expanded');
            }, 300);
        }

        function selectTheme(themeName) {
            closeThemesConstellation();
            // Use existing setAccentTheme function
            setAccentTheme(themeName);
            
            // Add haptic feedback
            if (navigator.vibrate) {
                navigator.vibrate(100);
            }
            
            console.log(`Theme changed to: ${themeName}`);
        }

        // ========================================

        // Initialize FAB touch events when DOM is ready
        document.addEventListener('DOMContentLoaded', setupFABTouchEvents);

        function toggleChatBottomSheet() {
            const sheet = document.getElementById('chat-bottom-sheet');
            if (sheet.classList.contains('open')) {
                closeChatBottomSheet();
            } else {
                openChatBottomSheet();
            }
        }
        window.toggleChatBottomSheet = toggleChatBottomSheet;

        function openChatBottomSheet() {
            const sheet = document.getElementById('chat-bottom-sheet');
            sheet.classList.add('open');
            document.body.style.overflow = 'hidden';
            
            // Sync connection status
            syncSheetConnectionStatus();
            
            // Ensure connection area is visible if not connected
            if (!isNetworkConnected) {
                const connectionArea = document.getElementById('sheet-connection-area');
                if (connectionArea) {
                    connectionArea.style.display = 'block';
                }
                console.log('üì° Ensured connection area is visible (disconnected state)');
            }
            
            // Focus on input if connected
            const input = document.getElementById('sheet-chat-input');
            setTimeout(() => {
                if (input && isNetworkConnected) {
                    input.focus();
                } else if (!isNetworkConnected) {
                    // Focus on session input if not connected
                    const sessionInput = document.getElementById('sheet-session-input');
                    if (sessionInput) {
                        sessionInput.focus();
                    }
                }
            }, 300);
            
            console.log('üì± Chat bottom sheet opened');
        }

        function closeChatBottomSheet() {
            const sheet = document.getElementById('chat-bottom-sheet');
            sheet.classList.remove('open', 'expanded');
            document.body.style.overflow = '';
            
            console.log('üì± Chat bottom sheet closed');
        }

        function expandBottomSheet() {
            const sheet = document.getElementById('chat-bottom-sheet');
            sheet.classList.toggle('expanded');
            
            const expandBtn = document.getElementById('expand-sheet-btn');
            const icon = expandBtn.querySelector('.material-icons');
            
            if (sheet.classList.contains('expanded')) {
                icon.textContent = 'fullscreen_exit';
                expandBtn.title = 'Exit full screen';
            } else {
                icon.textContent = 'fullscreen';
                expandBtn.title = 'Expand to full screen';
            }
        }

        function syncSheetConnectionStatus() {
            const sheetStatusDot = document.getElementById('sheet-status-dot');
            const sheetStatusText = document.getElementById('sheet-status-text');
            const originalStatusDot = document.getElementById('connection-status-dot');
            const originalStatusText = document.getElementById('connection-status-text');
            
            if (sheetStatusDot && originalStatusDot) {
                sheetStatusDot.className = originalStatusDot.className;
            }
            
            if (sheetStatusText && originalStatusText) {
                sheetStatusText.textContent = originalStatusText.textContent;
            }
            
            // Show/hide connection area based on connection status
            const connectionArea = document.getElementById('sheet-connection-area');
            const playerChips = document.getElementById('player-chips-area');
            
            // Always ensure connection area is visible when not connected
            if (connectionArea) {
                if (isNetworkConnected) {
                    connectionArea.style.display = 'none';
                } else {
                    connectionArea.style.display = 'block';
                    console.log('üì° Bottom sheet connection area shown (not connected)');
                }
            }
            
            // Show player chips only when connected
            if (playerChips) {
                if (isNetworkConnected) {
                    playerChips.style.display = 'block';
                } else {
                    playerChips.style.display = 'none';
                }
            }
        }

        function joinGameSessionFromSheet() {
            const input = document.getElementById('sheet-session-input');
            const originalInput = document.getElementById('session-code-input');
            
            if (input && originalInput) {
                originalInput.value = input.value;
                joinGameSession();
            }
        }

        function sendSheetMessage() {
            const input = document.getElementById('sheet-chat-input');
            if (input && input.value.trim()) {
                const message = input.value.trim();
                
                if (isNetworkConnected) {
                    sendChatMessageDirect(message);
                } else {
                    // Add to sheet chat for demo
                    addSheetChatMessage(message, 'player', networkPlayerName || 'You');
                }
                
                input.value = '';
                toggleSheetSendButton();
            }
        }

        function handleSheetChatKeyPress(event) {
            if (event.key === 'Enter') {
                sendSheetMessage();
            }
            toggleSheetSendButton();
        }

        function toggleSheetSendButton() {
            const input = document.getElementById('sheet-chat-input');
            const sendBtn = document.querySelector('.sheet-send-btn');
            
            if (input && sendBtn) {
                sendBtn.disabled = !input.value.trim();
            }
        }

        function addSheetChatMessage(message, type = 'system', author = 'System') {
            const messagesContainer = document.getElementById('sheet-chat-messages');
            if (!messagesContainer) return;

            const messageElement = document.createElement('div');
            messageElement.className = `chat-message ${type}`;
            
            if (type === 'system') {
                messageElement.innerHTML = `<span class="message-author">${author}:</span> ${message}`;
            } else {
                messageElement.innerHTML = `<span class="message-author">${author}:</span> ${message}`;
            }

            messageElement.style.margin = '8px 0';
            messageElement.style.padding = '8px 12px';
            messageElement.style.borderRadius = '8px';
            messageElement.style.backgroundColor = type === 'system' ? 'rgba(255, 193, 7, 0.1)' : 'rgba(0, 123, 255, 0.1)';

            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function showSheetChatEffects() {
            // Mobile-optimized chat picker modal with exact bottom sheet design
            if (!window.emojiProcessor || !window.chatEffectsManager) {
                alert('Chat effects: Try :crit:, :sparkle:, :fire:, :lightning:, :glow:, :throb:, or :bounce: in your messages!');
                return;
            }
            
            const emoticonList = window.emojiProcessor.getEmoticonList();
            const effectsData = window.chatEffectsManager.effects;
            const inputId = 'sheet-chat-input';
            
            // Create effects modal with identical bottom sheet structure
            const modal = document.createElement('div');
            modal.className = 'chat-bottom-sheet chat-effects-modal';
            modal.id = 'chat-effects-modal';
            modal.style.zIndex = '3000'; // Higher than chat modal
            
            modal.innerHTML = `
                <div class="bottom-sheet-backdrop" onclick="document.getElementById('chat-effects-modal').remove()"></div>
                <div class="bottom-sheet-content" style="height: 60vh; max-height: 500px;">
                    <!-- Drag Handle -->
                    <div class="bottom-sheet-handle">
                        <div class="handle-bar"></div>
                    </div>
                    
                    <!-- Bottom Sheet Header -->
                    <div class="bottom-sheet-header">
                        <div class="sheet-tabs-container">
                            <h4 style="margin: 0; color: var(--text-primary); font-size: 1.2em; display: flex; align-items: center; gap: 8px;">
                                ‚ú® Chat Effects
                            </h4>
                        </div>
                        <div class="sheet-controls">
                            <button class="sheet-control-btn" onclick="document.getElementById('chat-effects-modal').remove()" title="Close effects">
                                <span class="material-icons">close</span>
                            </button>
                        </div>
                    </div>

                    <!-- Effects Content -->
                    <div class="sheet-tab-content" style="flex: 1; overflow-y: auto; padding: 16px;">
                        <div id="effects-content-area">
                            <!-- Content will be populated by JavaScript -->
                        </div>
                    </div>
                </div>
            `;
            
            // Add to document
            document.body.appendChild(modal);
            
            // Apply the open state immediately
            modal.classList.add('open');
            
            // Populate effects content
            const contentArea = document.getElementById('effects-content-area');
            
            let contentHTML = `
                <!-- Quick Access Row -->
                <div style="margin-bottom: 20px;">
                    <h5 style="margin: 0 0 12px 0; color: var(--text-secondary); font-size: 0.9em; font-weight: 600;">‚ö° Quick Effects</h5>
                    <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px;">
            `;
            
            // Quick access buttons for most popular effects
            const quickEffects = [
                { command: ':crit:', name: 'Crit', icon: 'üí•' },
                { command: ':fire:', name: 'Fire', icon: 'üî•' },
                { command: ':sparkle:', name: 'Magic', icon: '‚ú®' },
                { command: ':lightning:', name: 'Thunder', icon: '‚ö°' },
                { command: ':glow:', name: 'Glow', icon: 'üåü' },
                { command: ':throb:', name: 'Throb', icon: 'üíì' },
                { command: ':bounce:', name: 'Bounce', icon: 'üèÄ' },
                { command: ':divine:', name: 'Divine', icon: 'üòá' }
            ];
            
            quickEffects.forEach(effect => {
                contentHTML += `
                    <button onclick="insertMobileText('${inputId}', '${effect.command}')" 
                            style="
                                background: var(--bg-secondary);
                                border: 1px solid var(--border-color);
                                border-radius: 8px;
                                padding: 12px 8px;
                                cursor: pointer;
                                font-size: 0.8em;
                                transition: all 0.2s;
                                display: flex;
                                flex-direction: column;
                                align-items: center;
                                justify-content: center;
                                color: var(--text-primary);
                                min-height: 60px;
                                gap: 4px;
                            "
                            ontouchstart="this.style.background='var(--accent-color)'; this.style.transform='scale(0.95)';"
                            ontouchend="setTimeout(() => { this.style.background='var(--bg-secondary)'; this.style.transform='scale(1)'; }, 150);"
                            onmousedown="this.style.background='var(--accent-color)'; this.style.transform='scale(0.95)';"
                            onmouseup="this.style.background='var(--bg-secondary)'; this.style.transform='scale(1)';"
                            title="${effect.command}">
                        <span style="font-size: 1.2em;">${effect.icon}</span>
                        <span style="font-size: 0.7em; font-weight: 600;">${effect.name}</span>
                    </button>
                `;
            });
            
            contentHTML += `
                    </div>
                </div>
                
                <!-- Emojis Section -->
                <div style="margin-bottom: 20px;">
                    <h5 style="margin: 0 0 12px 0; color: var(--text-secondary); font-size: 0.9em; font-weight: 600;">üòä Gaming Emojis (Tap to Add)</h5>
                    <div style="display: grid; grid-template-columns: repeat(6, 1fr); gap: 6px; max-width: 100%;">
            `;
            
            // Popular emojis for gaming - COMPACT MOBILE VERSION  
            const popularEmojis = [
                { emoji: '‚öîÔ∏è', code: ':sword:' },
                { emoji: 'üõ°Ô∏è', code: ':shield:' },
                { emoji: 'üé≤', code: ':dice:' },
                { emoji: "üí∞", code: ":treasure:" },
                { emoji: '‚ú®', code: ':mp:' },
                { emoji: 'üî•', code: ':fire:' },
                { emoji: "üíÄ", code: ":skull:" },
                { emoji: "üí•", code: ":fumble:" },
                { emoji: '‚ùÑÔ∏è', code: ':ice:' },
                { emoji: '‚ò†Ô∏è', code: ':poison:' },
                { emoji: '‚≠ê', code: ':star:' },
                { emoji: '‚ù§Ô∏è', code: '<3' }
            ];
            
            popularEmojis.forEach(emoji => {
                contentHTML += `
                    <button onclick="insertMobileText('${inputId}', '${emoji.code}')" 
                            style="
                                background: var(--bg-secondary);
                                border: 1px solid var(--border-color);
                                border-radius: 6px;
                                padding: 8px;
                                cursor: pointer;
                                font-size: 1.3em;
                                transition: all 0.2s;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                color: var(--text-primary);
                                min-height: 44px;
                                aspect-ratio: 1;
                            "
                            ontouchstart="this.style.background='var(--accent-color)'; this.style.transform='scale(0.9)';"
                            ontouchend="setTimeout(() => { this.style.background='var(--bg-secondary)'; this.style.transform='scale(1)'; }, 150);"
                            onmousedown="this.style.background='var(--accent-color)'; this.style.transform='scale(0.9)';"
                            onmouseup="this.style.background='var(--bg-secondary)'; this.style.transform='scale(1)';"
                            title="${emoji.code}">
                        ${emoji.emoji}
                    </button>
                `;
            });
            
            contentHTML += `
                    </div>
                </div>
                
                <!-- Combinations Section -->
                <div style="margin-bottom: 20px;">
                    <h5 style="margin: 0 0 12px 0; color: var(--text-secondary); font-size: 0.9em; font-weight: 600;">üé® Quick Combos</h5>
                    <div style="display: flex; flex-direction: column; gap: 8px;">
            `;
            
            const quickCombos = [
                { combo: ':crit: :big: ', text: 'MASSIVE DAMAGE!', desc: 'Critical Hit' },
                { combo: ':fire: :throb: ', text: 'Burning Throb!', desc: 'Fire Attack' },
                { combo: ':sparkle: :glow: ', text: 'Magic Spell!', desc: 'Magical Effect' },
                { combo: ':lightning: :fast: ', text: 'Quick Strike!', desc: 'Lightning Attack' }
            ];
            
            quickCombos.forEach(combo => {
                contentHTML += `
                    <button onclick="insertMobileText('${inputId}', '${combo.combo}')" 
                            style="
                                background: var(--bg-secondary);
                                border: 1px solid var(--border-color);
                                border-radius: 8px;
                                padding: 12px;
                                cursor: pointer;
                                font-size: 0.9em;
                                transition: all 0.2s;
                                display: flex;
                                justify-content: space-between;
                                align-items: center;
                                color: var(--text-primary);
                                text-align: left;
                            "
                            ontouchstart="this.style.background='var(--accent-color)'; this.style.color='white';"
                            ontouchend="setTimeout(() => { this.style.background='var(--bg-secondary)'; this.style.color='var(--text-primary)'; }, 150);"
                            onmousedown="this.style.background='var(--accent-color)'; this.style.color='white';"
                            onmouseup="this.style.background='var(--bg-secondary)'; this.style.color='var(--text-primary)';">
                        <div>
                            <strong>${combo.combo}</strong>${combo.text}
                        </div>
                        <span style="font-size: 0.7em; opacity: 0.6;">${combo.desc}</span>
                    </button>
                `;
            });
            
            contentHTML += `
                    </div>
                </div>
                
                <!-- Tips Section -->
                <div style="padding: 16px; background: var(--bg-secondary); border-radius: 8px; color: var(--text-tertiary); font-size: 0.8em; line-height: 1.4; margin-top: 16px;">
                    <strong>üí° Tips:</strong><br>
                    ‚Ä¢ Effects work on text that follows them<br>
                    ‚Ä¢ Combine effects: <code>:fire: :big: HUGE FIREBALL!</code><br>
                    ‚Ä¢ Mix with emojis: <code>:crit: ‚öîÔ∏è Critical Hit!</code>
                </div>
            `;
            
            // Set the content
            contentArea.innerHTML = contentHTML;
            
            // Close on outside click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                }
            });
        }

        // Mobile text insertion function
        function insertMobileText(inputId, text) {
            const input = document.getElementById(inputId);
            if (input) {
                const cursorPos = input.selectionStart;
                const textBefore = input.value.substring(0, cursorPos);
                const textAfter = input.value.substring(input.selectionEnd);
                
                input.value = textBefore + text + ' ' + textAfter;
                input.setSelectionRange(cursorPos + text.length + 1, cursorPos + text.length + 1);
                input.focus();
                
                // Enable send button if this is the sheet input
                if (inputId === 'sheet-chat-input') {
                    toggleSheetSendButton();
                }
                
                // Close the modal (handle both old and new modal classes)
                document.querySelector('.mobile-chat-modal')?.remove();
                document.querySelector('.chat-effects-modal')?.remove();
            }
        }

        function showSheetImageUpload() {
            // Try to trigger the ChatImageUploadIntegration system directly
            if (window.chatImageUploadIntegration && typeof window.chatImageUploadIntegration.handleUploadClick === 'function') {
                // Find any available button to use as context
                const imageUploadBtn = document.getElementById('modal-v4-image-upload-btn') || document.getElementById('v4-image-upload-btn');
                if (imageUploadBtn) {
                    window.chatImageUploadIntegration.handleUploadClick(imageUploadBtn);
                    return;
                }
            }
            
            // Fallback: try existing button onclick handlers
            const imageUploadBtn = document.getElementById('v4-image-upload-btn') || document.getElementById('modal-v4-image-upload-btn');
            if (imageUploadBtn && imageUploadBtn.onclick) {
                imageUploadBtn.onclick();
            } else {
                alert('Image upload system not ready. Please wait for full initialization.');
            }
        }

        function showSheetPlayers() {
            // Show Your Notes modal instead of the old command center
            showYourNotesModal();
        }

        function showYourNotesModal() {
            // Create modal overlay
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.7);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
                box-sizing: border-box;
            `;

            // Create modal content
            const modal = document.createElement('div');
            modal.style.cssText = `
                background: white;
                border-radius: 12px;
                padding: 24px;
                max-width: 600px;
                width: 100%;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
                position: relative;
            `;

            // Get private messages content using the same logic as updatePrivateMessagesPanel
            let notesContent = '';
            if (receivedNotes.length === 0) {
                notesContent = `
                    <div style="text-align: center; color: #8a8a8a; padding: 40px 20px;">
                        <i class="material-icons" style="font-size: 3em; margin-bottom: 16px; display: block;">mail_outline</i>
                        <h4 style="margin: 0 0 8px 0; color: #666;">No private notes yet!</h4>
                        <p style="margin: 0; font-size: 0.9em;">You'll receive private notes here when other players or the storyteller send them to you.</p>
                    </div>
                `;
            } else {
                // Build messages HTML using the same format as updatePrivateMessagesPanel
                receivedNotes.forEach((note, index) => {
                    const time = new Date(note.timestamp).toLocaleString();
                    let messageContent = note.message;
                    
                    // Process image markup in notes (same as existing function)
                    if (messageContent && messageContent.includes('üñºÔ∏è [IMAGE:')) {
                        messageContent = messageContent.replace(/üñºÔ∏è \[IMAGE:(https?:\/\/[^\]]+)\]/g, (match, imageUrl) => {
                            return `<br><div style="text-align: center; margin: 12px 0;"><img src="${imageUrl}" style="max-width: 100%; max-height: 150px; border-radius: 6px; border: 1px solid #ddd; cursor: pointer;" onclick="if(window.chatImageSystem && window.chatImageSystem.openImageModal) { window.chatImageSystem.openImageModal('${imageUrl}', '${note.from}'); } else { window.open('${imageUrl}', '_blank'); }" title="Click to view full size"><br><small style="color: #666; font-style: italic;">Click image to view full size</small></div>`;
                        });
                    }
                    
                    notesContent += `
                        <div style="border: 1px solid #e0e0e0; border-radius: 6px; padding: 12px; margin-bottom: 12px; background: #f9f9f9; position: relative;">
                            <button onclick="deleteNoteFromModal('${note.id}', this)" style="
                                position: absolute;
                                top: 8px;
                                right: 8px;
                                background: #e74c3c;
                                color: white;
                                border: none;
                                border-radius: 50%;
                                width: 22px;
                                height: 22px;
                                cursor: pointer;
                                font-size: 12px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                opacity: 0.7;
                                transition: opacity 0.2s;
                            " onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0.7'" title="Delete note">√ó</button>
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; padding-right: 30px;">
                                <strong style="color: #333; font-size: 1em;">From: ${note.from}</strong>
                                <small style="color: #666; font-size: 0.85em;">${time}</small>
                            </div>
                            <div style="color: #444; line-height: 1.4; font-size: 0.95em; margin-bottom: 12px;">${messageContent}</div>
                            <div style="text-align: right; padding-top: 8px; border-top: 1px solid #e8e8e8;">
                                <button onclick="replyToNote('${note.from.replace(/'/g, "\\'")}', '${note.id}')" style="
                                    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                                    color: white;
                                    border: none;
                                    padding: 6px 12px;
                                    border-radius: 4px;
                                    cursor: pointer;
                                    font-size: 0.85em;
                                    transition: transform 0.2s, box-shadow 0.2s;
                                    box-shadow: 0 1px 4px rgba(40, 167, 69, 0.3);
                                " onmouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 2px 8px rgba(40, 167, 69, 0.4)'" 
                                   onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 1px 4px rgba(40, 167, 69, 0.3)'" 
                                   title="Reply to ${note.from}">üí¨ Reply</button>
                            </div>
                        </div>
                    `;
                });
            }

            modal.innerHTML = `
                <div style="text-align: center; margin-bottom: 24px;">
                    <h3 style="margin: 0 0 8px 0; color: #333; font-size: 1.3em;">üìù Your Notes</h3>
                    <p style="margin: 0; color: #666; font-size: 0.9em;">Private messages and notes sent to you</p>
                    ${receivedNotes.length > 0 ? `<p style="margin: 8px 0 0 0; color: #666; font-size: 0.85em;">${receivedNotes.length} note${receivedNotes.length === 1 ? '' : 's'}</p>` : ''}
                </div>
                
                <div id="modal-notes-container" style="max-height: 400px; overflow-y: auto; margin-bottom: 20px;">
                    ${notesContent}
                </div>
                
                <div style="display: flex; gap: 12px; justify-content: flex-end; padding-top: 16px; border-top: 1px solid #e0e0e0;">
                    <button onclick="refreshNotesModal()" style="
                        background: #6c757d; 
                        color: white; 
                        border: none; 
                        padding: 10px 16px; 
                        border-radius: 6px; 
                        cursor: pointer;
                        font-size: 14px;
                        transition: background 0.2s;
                    " onmouseover="this.style.background='#5a6268'" onmouseout="this.style.background='#6c757d'">üîÑ Refresh</button>
                    
                    <button onclick="closeYourNotesModal()" style="
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; 
                        border: none; 
                        padding: 10px 20px; 
                        border-radius: 6px; 
                        cursor: pointer;
                        font-size: 14px;
                        transition: transform 0.2s, box-shadow 0.2s;
                        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
                    " onmouseover="this.style.transform='translateY(-1px)'" onmouseout="this.style.transform='translateY(0)'">Close</button>
                </div>
            `;

            // Add click outside to close
            overlay.addEventListener('click', function(e) {
                if (e.target === overlay) {
                    closeYourNotesModal();
                }
            });

            // Store reference for other functions
            window.yourNotesModal = {
                overlay: overlay,
                modal: modal
            };

            overlay.appendChild(modal);
            document.body.appendChild(overlay);

            // Focus on modal for keyboard accessibility
            modal.focus();
        }

        function closeYourNotesModal() {
            if (window.yourNotesModal && window.yourNotesModal.overlay) {
                document.body.removeChild(window.yourNotesModal.overlay);
                window.yourNotesModal = null;
            }
        }

        function refreshNotesModal() {
            // TODO: For real-time updates, this is where we would implement live refresh
            // For now, just close and reopen the modal to get latest data
            closeYourNotesModal();
            setTimeout(() => showYourNotesModal(), 100);
        }

        function deleteNoteFromModal(noteId, buttonElement) {
            console.log('üóëÔ∏è Deleting note from modal:', noteId);
            
            // Remove from array (same logic as existing deleteNote function)
            const index = receivedNotes.findIndex(note => note.id === noteId);
            if (index !== -1) {
                receivedNotes.splice(index, 1);
                console.log('üóëÔ∏è Note deleted. Remaining notes:', receivedNotes.length);
                
                // Update the main panel
                updateNotificationIcon();
                updatePrivateMessagesPanel();
                
                // Auto-save after deletion
                if (typeof saveNotesToCharacterSilent === 'function') {
                    saveNotesToCharacterSilent();
                    console.log('üíæ Auto-saved after note deletion');
                }
                
                // Update the modal content
                const noteDiv = buttonElement.closest('div[style*="border: 1px solid #e0e0e0"]');
                if (noteDiv) {
                    noteDiv.style.opacity = '0';
                    noteDiv.style.transform = 'translateX(-20px)';
                    setTimeout(() => {
                        refreshNotesModal(); // Refresh the modal to show updated content
                    }, 200);
                }
                
                // Save to IndexedDB (same as existing function)
                if (typeof saveCharacterData === 'function') {
                    saveCharacterData();
                }
            }
        }

        function replyToNote(senderName, noteId) {
            console.log('üí¨ Replying to note from:', senderName);
            
            // Close the Your Notes modal first
            closeYourNotesModal();
            
            // Small delay to let the modal close, then open the send note modal
            setTimeout(() => {
                // Use the correct function name: showNoteInput
                if (typeof showNoteInput === 'function') {
                    showNoteInput(senderName);
                } else {
                    console.warn('showNoteInput function not found. Cannot open reply modal.');
                    // Fallback: show an alert
                    alert(`Reply feature requires connection to session. Target: ${senderName}`);
                }
            }, 150);
        }

        // Enable input monitoring for send button
        document.addEventListener('DOMContentLoaded', function() {
            const sheetInput = document.getElementById('sheet-chat-input');
            if (sheetInput) {
                sheetInput.addEventListener('input', toggleSheetSendButton);
            }
        });

        // ========================================
        // CHAT TAB FUNCTIONS
        // ========================================

        function switchChatTab(tabName) {
            // Update tab buttons
            const tabs = document.querySelectorAll('.sheet-tab');
            const panels = document.querySelectorAll('.tab-panel');
            
            tabs.forEach(tab => {
                if (tab.dataset.tab === tabName) {
                    tab.classList.add('active');
                } else {
                    tab.classList.remove('active');
                }
            });
            
            // Update tab content
            panels.forEach(panel => {
                if (panel.id === tabName + '-tab-panel') {
                    panel.classList.add('active');
                } else {
                    panel.classList.remove('active');
                }
            });
            
            // Update roll history when switching to rolls tab
            if (tabName === 'rolls') {
                updateChatRollHistory();
            }
            
            console.log(`üìã Switched to ${tabName} tab`);
        }
        window.switchChatTab = switchChatTab;

        // ========================================
        // CHAT ROLL HISTORY FUNCTIONS  
        // ========================================

        function updateChatRollHistory() {
            const rollHistoryContainer = document.getElementById('sheet-roll-history');
            if (!rollHistoryContainer) return;

            // Get roll history from character data (same as main roll history)
            if (!character || !character.rollHistory || character.rollHistory.length === 0) {
                rollHistoryContainer.innerHTML = `
                    <div style="text-align: center; color: #8a8a8a; padding: 40px;">
                        <i class="ra ra-perspective-dice-six" style="font-size: 3em; margin-bottom: 15px; display: block;"></i>
                        No rolls yet! Click attributes, skills, weapons, or spells to start rolling.
                    </div>
                `;
                return;
            }

            // Render roll history items (using same logic as main updateRollHistoryDisplay)
            rollHistoryContainer.innerHTML = character.rollHistory.map((roll, index) => {
                let content = '';
                let typeIcon = '';
                let typeColor = '';

                if (roll.type === 'Weapon') {
                    typeIcon = 'ra-sword';
                    typeColor = '#d4af37';
                    content = `
                        <div class="roll-item-header">
                            <h4 class="roll-item-title">
                                <i class="ra ${typeIcon}"></i> ${roll.name} Attack ${roll.toHit?.isCrit ? 'üí•' : ''}
                            </h4>
                            <span class="roll-item-timestamp">${roll.timestamp}</span>
                        </div>
                        ${roll.toHit?.isCrit ? '<div class="crit-indicator">CRITICAL HIT!</div>' : ''}
                        <div class="roll-item-result">
                            To Hit: ${roll.toHit?.total || 'N/A'} | Damage: ${roll.totalDamage}
                        </div>
                        <div class="roll-item-details">
                            To Hit: d10(${roll.toHit?.d10Roll || '?'}) + ${roll.statUsed.substring(0, 3).toUpperCase()}(${roll.toHit?.statBonus || '?'}) + Lv(${roll.toHit?.levelBonus || '?'})<br>
                            Damage: d${roll.diceType}(${roll.damageRoll}) + ${roll.statUsed.substring(0, 3).toUpperCase()}(${roll.statBonus})${roll.toHit?.isCrit ? ' + Crit(5)' : ''}<br>
                            ${roll.weaponSize} ${roll.isRanged ? 'Ranged' : 'Melee'} Weapon
                        </div>
                    `;
                } else if (roll.type === 'Spell' && roll.toHit) {
                    typeIcon = 'ra-lightning';
                    typeColor = '#8a4a8a';
                    content = `
                        <div class="roll-item-header">
                            <h4 class="roll-item-title">
                                <i class="ra ${typeIcon}"></i> ${roll.name} ${roll.toHit?.isCrit ? 'üí•' : ''}
                            </h4>
                            <span class="roll-item-timestamp">${roll.timestamp}</span>
                        </div>
                        ${roll.toHit?.isCrit ? '<div class="crit-indicator">CRITICAL HIT!</div>' : ''}
                        <div class="roll-item-result">
                            To Hit: ${roll.toHit?.total || 'N/A'} | Damage: ${roll.totalDamage}
                        </div>
                        <div class="roll-item-details">
                            To Hit: d10(${roll.toHit?.d10Roll || '?'}) + ${roll.statUsed.substring(0, 3).toUpperCase()}(${roll.toHit?.statBonus || '?'}) + Lv(${roll.toHit?.levelBonus || '?'})<br>
                            Damage: d${roll.diceType}(${roll.damageRoll}) + ${roll.statUsed.substring(0, 3).toUpperCase()}(${roll.statBonus})${roll.toHit?.isCrit ? ' + Crit(5)' : ''}<br>
                            ${roll.element} Magic | Cost: ${roll.cost} MP
                        </div>
                    `;
                } else if (roll.type === 'Spell' && !roll.toHit) {
                    typeIcon = 'ra-lightning';
                    typeColor = '#8a4a8a';
                    content = `
                        <div class="roll-item-header">
                            <h4 class="roll-item-title">
                                <i class="ra ${typeIcon}"></i> ${roll.name}
                            </h4>
                            <span class="roll-item-timestamp">${roll.timestamp}</span>
                        </div>
                        <div class="roll-item-result">
                            ${roll.element} Magic | Cost: ${roll.cost} MP
                        </div>
                        <div class="roll-item-details">
                            ${roll.results ? roll.results.join('<br>') : 'Spell cast successfully!'}
                        </div>
                    `;
                } else {
                    // Attribute/Skill rolls
                    typeIcon = roll.type === 'Attribute' ? 'ra-muscle-up' : roll.type === 'Skill' ? 'ra-gear' : 'ra-lightning';
                    typeColor = roll.type === 'Attribute' ? '#4a6a8a' : roll.type === 'Skill' ? '#4a8a4a' : '#8a4a8a';
                    const diceDisplay = roll.diceRolls ? roll.diceRolls.map(r => `<span style="color: #f4d03f;">${r}</span>`).join(' + ') : 'N/A';

                    content = `
                        <div class="roll-item-header">
                            <h4 class="roll-item-title">
                                <i class="ra ${typeIcon}"></i> ${roll.name} ${roll.type === 'Skill' ? `[${roll.stat}]` : ''}
                            </h4>
                            <span class="roll-item-timestamp">${roll.timestamp}</span>
                        </div>
                        <div class="roll-item-result">
                            Result: ${roll.finalTotal}
                        </div>
                        <div class="roll-item-details">
                            ${roll.diceRolls ? `Dice: [${diceDisplay}] = ${roll.diceTotal} + Level: ${roll.levelBonus} + Bonus: ${roll.statBonus}` :
                            roll.results ? roll.results.join('<br>') : 'Spell cast successfully!'}
                        </div>
                    `;
                }

                return `
                    <div class="roll-history-item" style="border-left-color: ${typeColor};">
                        ${content}
                    </div>
                `;
            }).join('');
        }

        function clearChatRollHistory() {
            // Use the existing clearRollHistory function
            if (typeof clearRollHistory === 'function') {
                clearRollHistory();
                updateChatRollHistory();
                
                // Also update main roll history display
                if (typeof updateRollHistoryDisplay === 'function') {
                    updateRollHistoryDisplay();
                }
                
                console.log('üßπ Cleared roll history from chat');
            } else {
                console.warn('clearRollHistory function not available');
            }
        }

        // Sync main chat messages to bottom sheet
        function syncMessageToBottomSheet(messageHTML, type, sender) {
            const sheetMessagesContainer = document.getElementById('sheet-chat-messages');
            if (!sheetMessagesContainer) return;

            const messageElement = document.createElement('div');
            messageElement.className = `chat-message ${type}`;
            messageElement.innerHTML = messageHTML;
            
            // Apply styling similar to main chat
            messageElement.style.margin = '8px 0';
            messageElement.style.padding = '8px 12px';
            messageElement.style.borderRadius = '8px';
            
            if (type === 'system') {
                messageElement.style.backgroundColor = 'rgba(255, 193, 7, 0.1)';
                messageElement.style.borderLeft = '3px solid #ffc107';
            } else if (type === 'storyteller') {
                messageElement.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                messageElement.style.borderLeft = '3px solid #dc3545';
            } else {
                messageElement.style.backgroundColor = 'rgba(0, 123, 255, 0.1)';
                messageElement.style.borderLeft = '3px solid #007bff';
            }

            sheetMessagesContainer.appendChild(messageElement);
            sheetMessagesContainer.scrollTop = sheetMessagesContainer.scrollHeight;
        }

        // Update FAB notification dot
        function updateFABNotification() {
            const fab = document.getElementById('chat-fab');
            const notificationDot = document.querySelector('.fab-notification-dot');
            const bottomSheet = document.getElementById('chat-bottom-sheet');
            
            if (fab && notificationDot && bottomSheet) {
                // Show notification if bottom sheet is closed
                if (!bottomSheet.classList.contains('open')) {
                    notificationDot.style.display = 'block';
                    // Hide after a delay if user doesn't interact
                    setTimeout(() => {
                        if (!bottomSheet.classList.contains('open')) {
                            notificationDot.style.display = 'none';
                        }
                    }, 5000);
                } else {
                    // Hide notification if bottom sheet is open
                    notificationDot.style.display = 'none';
                }
            }
        }

        // Helper function to send chat messages directly
        async function sendChatMessageDirect(message) {
            try {
                if (typeof window.sendChatMessageAsync === 'function') {
                    await window.sendChatMessageAsync(message);
                } else if (typeof window.sendChatMessage === 'function') {
                    await window.sendChatMessage(message);
                } else {
                    console.warn('Chat functions not available');
                }
            } catch (error) {
                console.error('Failed to send message:', error);
            }
        }

        // Update player name in command center when network player name changes
        function updateCommandCenterPlayerName() {
            const selfPlayerName = document.getElementById('self-player-name');
            const selfPlayerDetails = document.querySelector('.player-item.self .player-details');
            const selfPlayerAvatar = document.querySelector('.player-item.self .avatar-placeholder');
            
            if (selfPlayerName && networkPlayerName) {
                selfPlayerName.textContent = networkPlayerName;
            }
            
            // Get real character data
            const characterData = getCurrentCharacterData();
            
            // Update self player details with real data
            if (selfPlayerDetails) {
                selfPlayerDetails.innerHTML = `Lvl: ${characterData.level}<br>${characterData.heritage} - ${characterData.class}`;
            }
            
            // Update avatar if available
            if (selfPlayerAvatar && characterData.avatar) {
                const avatarImg = document.createElement('img');
                avatarImg.src = characterData.avatar;
                avatarImg.style.width = '100%';
                avatarImg.style.height = '100%';
                avatarImg.style.objectFit = 'cover';
                selfPlayerAvatar.parentNode.innerHTML = '';
                selfPlayerAvatar.parentNode.appendChild(avatarImg);
            }
        }

        // Extract current character data from V4 character tab
        function getCurrentCharacterData() {
            const levelElement = document.getElementById('char-level-display');
            const summaryElement = document.getElementById('char-summary');
            const portraitElement = document.getElementById('overview-portrait');
            
            // Extract level (e.g., "Level 1" -> "1")
            let level = '1';
            if (levelElement && levelElement.textContent) {
                const levelMatch = levelElement.textContent.match(/Level (\d+)/);
                if (levelMatch) {
                    level = levelMatch[1];
                }
            }
            
            // Extract heritage, background, and class from character summary
            let heritage = 'Unknown';
            let background = 'Unknown'; 
            let characterClass = 'Unknown';
            
            if (summaryElement && summaryElement.textContent) {
                const summaryText = summaryElement.textContent;
                // The summary typically contains: "Heritage Background Class" format
                const parts = summaryText.trim().split(' ');
                if (parts.length >= 3) {
                    heritage = parts[0];
                    background = parts[1];
                    characterClass = parts[2];
                } else if (parts.length === 2) {
                    heritage = parts[0];
                    characterClass = parts[1];
                } else if (parts.length === 1) {
                    characterClass = parts[0];
                }
            }
            
            // Extract avatar from overview-portrait
            let avatar = null;
            if (portraitElement) {
                const imgElement = portraitElement.querySelector('img');
                if (imgElement && imgElement.src && imgElement.src.startsWith('data:')) {
                    avatar = imgElement.src;
                }
            }
            
            return {
                level,
                heritage,
                background,
                class: characterClass,
                avatar
            };
        }

        // Function to update connected players list (called by supabase-chat.js)
        function updateConnectedPlayers(players = []) {
            console.log('üîç Updating connected players:', players);
            console.log('üîç ChatCommandParser available:', !!window.chatCommandParser);
            
            // DEPRECATED: The old connected-players list has been replaced by player-chips-area
            // Legacy code commented out below:
            /*
            const playerList = document.getElementById('connected-players');
            if (playerList) {
                // Clear existing players except self
                const selfPlayer = playerList.querySelector('.player-item.self');
                playerList.innerHTML = '';
                
                // Add self back
                if (selfPlayer) {
                    playerList.appendChild(selfPlayer);
                }
                
                // Add connected players
                players.forEach(player => {
                    if (player.name && player.name !== networkPlayerName && player.name !== 'System' && player.name !== 'Heartbeat') {
                        const playerDiv = document.createElement('div');
                        playerDiv.className = 'player-item';
                        
                        // Add storyteller class if they are the storyteller
                        if (player.is_storyteller) {
                            playerDiv.classList.add('storyteller');
                        }
                        
                        // For now, use placeholder data - this can be enhanced later with real character data
                        const level = 'Unknown';
                        const heritage = player.is_storyteller ? 'Storyteller' : 'Player';
                        const playerClass = player.is_storyteller ? 'Master' : 'Adventurer';
                        
                        playerDiv.innerHTML = `
                            <div class="player-avatar">
                                <div class="avatar-placeholder">${player.is_storyteller ? 'üëë' : '‚öîÔ∏è'}</div>
                            </div>
                            <div class="player-info">
                                <div class="player-name clickable-player-name" data-player-name="${player.name}">${player.name}</div>
                                <div class="player-details">Level: ${level}<br>${heritage} - ${playerClass}</div>
                            </div>
                        `;
                        
                        playerList.appendChild(playerDiv);
                    }
                });
            }
            */
            
            // Update Bottom Sheet player chips
            const playerChipsScroll = document.querySelector('.player-chips-scroll');
            if (playerChipsScroll) {
                // Update the self chip with current player info and avatar
                let selfChip = playerChipsScroll.querySelector('.player-chip.self');
                if (selfChip) {
                    // Update self chip with current player name and avatar
                    const currentPlayerName = window.networkPlayerName || 'You';
                    const nameElement = selfChip.querySelector('.chip-name');
                    if (nameElement) {
                        nameElement.textContent = currentPlayerName;
                    }
                    
                    // Check if we have an avatar for the current player
                    const avatarElement = selfChip.querySelector('.chip-avatar');
                    if (avatarElement) {
                        const chatParser = window.chatCommandParser;
                        const cachedAvatarUrl = chatParser?.getCachedAvatarUrl?.(currentPlayerName);
                        
                        if (cachedAvatarUrl) {
                            avatarElement.innerHTML = `<img src="${cachedAvatarUrl}" alt="${currentPlayerName}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;" onerror="this.parentElement.innerHTML='üë§'">`;
                        } else {
                            // Try to get avatar from current character data
                            const characterData = getCurrentCharacterData();
                            if (characterData?.personal?.avatarUrl) {
                                avatarElement.innerHTML = `<img src="${characterData.personal.avatarUrl}" alt="${currentPlayerName}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;" onerror="this.parentElement.innerHTML='üë§'">`;
                                
                                // Cache it for future use
                                if (chatParser && typeof chatParser.handleAvatarUrlCommand === 'function') {
                                    chatParser.handleAvatarUrlCommand(currentPlayerName, characterData.personal.avatarUrl, 'self');
                                }
                            } else {
                                avatarElement.innerHTML = 'üë§';
                            }
                        }
                    }
                }
                
                // Clear other chips but keep self
                const allChips = Array.from(playerChipsScroll.children);
                allChips.forEach(chip => {
                    if (!chip.classList.contains('self')) {
                        chip.remove();
                    }
                });
                
                // Add player chips for connected players
                console.log('üîç Creating chips for connected players:', players);
                players.forEach(player => {
                    if (player.name && player.name !== networkPlayerName && player.name !== 'System' && player.name !== 'Heartbeat') {
                        console.log(`üîç Creating chip for player: ${player.name}`);
                        const chipDiv = document.createElement('div');
                        chipDiv.className = 'player-chip';
                        
                        if (player.is_storyteller) {
                            chipDiv.classList.add('storyteller');
                        }
                        
                        // Check for cached avatar URL
                        let avatarContent;
                        const chatParser = window.chatCommandParser;
                        const cachedAvatarUrl = chatParser?.getCachedAvatarUrl?.(player.name);
                        
                        console.log(`üîç Cached avatar URL for ${player.name}:`, cachedAvatarUrl);
                        
                        if (cachedAvatarUrl) {
                            avatarContent = `<img src="${cachedAvatarUrl}" alt="${player.name}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;" onerror="this.parentElement.innerHTML='${player.is_storyteller ? 'üëë' : '‚öîÔ∏è'}'">`;
                            console.log(`‚úÖ Using cached avatar for ${player.name}`);
                        } else {
                            avatarContent = player.is_storyteller ? 'üëë' : '‚öîÔ∏è';
                            console.log(`üîç No cached avatar for ${player.name}, using default: ${avatarContent}`);
                        }
                        
                        chipDiv.innerHTML = `
                            <div class="chip-avatar">${avatarContent}</div>
                            <span class="chip-name">${player.name}</span>
                        `;
                        
                        // Add click event for sending notes
                        chipDiv.addEventListener('click', (e) => {
                            // Provide haptic feedback on supported devices
                            if (navigator.vibrate) {
                                navigator.vibrate(50); // Short vibration
                            }
                            
                            // Visual feedback animation
                            chipDiv.style.transform = 'scale(0.95)';
                            setTimeout(() => {
                                chipDiv.style.transform = '';
                            }, 150);
                            
                            showNoteInput(player.name);
                        });
                        
                        // Add touch event handlers for better mobile experience
                        chipDiv.addEventListener('touchstart', (e) => {
                            chipDiv.style.transition = 'transform 0.1s ease';
                        });
                        
                        chipDiv.addEventListener('touchend', (e) => {
                            chipDiv.style.transition = 'all 0.2s ease';
                        });
                        
                        // Add visual feedback for clickable chips
                        chipDiv.style.cursor = 'pointer';
                        chipDiv.title = `Send a private note to ${player.name}`;
                        
                        playerChipsScroll.appendChild(chipDiv);
                    }
                });
                
                console.log(`‚úÖ Player chips updated: ${players.length} players found`);
            }
            
            console.log(`‚úÖ Player list updated: ${players.length} players found`);
        }

        // Helper function to get current character data (similar to qr.js)
        function getCurrentCharacterData() {
            // Try different ways to get current character data
            
            // First check if the global character object exists (main.js)
            if (typeof character !== 'undefined' && character) {
                return character;
            }
            
            if (window.currentCharacter) {
                return window.currentCharacter;
            }
            
            if (window.character) {
                return window.character;
            }
            
            // Try to get from character manager
            if (window.characterManager && window.characterManager.currentCharacterId && window.characterManager.characters) {
                const currentChar = characterManager.characters.find(
                    char => char.id === characterManager.currentCharacterId
                );
                if (currentChar) return currentChar;
            }
            
            return null;
        }

        // Make updateConnectedPlayers globally available for supabase-chat.js
        window.updateConnectedPlayers = updateConnectedPlayers;

        // Handle player name clicks for sending notes
        function setupPlayerClickHandlers() {
            const playerList = document.getElementById('connected-players');
            if (!playerList) {
                console.log('ÔøΩ Connected players list not found - player click handlers not needed');
                return;
            }
            
            console.log('üêõ Setting up player click handlers on:', playerList);
            
            // Use event delegation to handle clicks on dynamically added player names
            playerList.addEventListener('click', function(event) {
                console.log('üêõ Player list clicked:', event.target);
                const clickedName = event.target.closest('.clickable-player-name');
                console.log('üêõ Closest clickable name:', clickedName);
                if (!clickedName) return;
                
                const targetPlayerName = clickedName.getAttribute('data-player-name');
                console.log('üêõ Target player name:', targetPlayerName);
                if (targetPlayerName) {
                    promptForNote(targetPlayerName);
                }
            });
        }

        // Prompt user for note content and send NOTE command
        function promptForNote(targetPlayerName) {
            console.log('üêõ promptForNote called for:', targetPlayerName);
            const noteText = prompt(`Send a note to ${targetPlayerName}:`);
            console.log('üêõ User entered note text:', noteText);
            if (noteText && noteText.trim()) {
                sendNoteCommand(targetPlayerName, noteText.trim());
            } else {
                console.log('üêõ Note cancelled or empty');
            }
        }

        // Send NOTE command through chat
        function sendNoteCommand(targetPlayerName, noteText) {
            console.log('üêõ sendNoteCommand called with:', targetPlayerName, noteText);
            
            const noteCommand = `NOTE:${targetPlayerName}:${noteText}`;
            console.log('üêõ Sending command:', noteCommand);
            
            // Method 1: Use chat input and sendMessage()
            const chatInput = document.getElementById('chat-input');
            if (chatInput && typeof sendMessage === 'function') {
                chatInput.value = noteCommand;
                sendMessage();
                console.log(`üìù Sent note to ${targetPlayerName}: ${noteText}`);
            }
            // Method 2: Try Supabase functions directly
            else if (typeof window.sendChatMessageAsync === 'function') {
                window.sendChatMessageAsync(noteCommand);
                console.log(`üìù Sent note via sendChatMessageAsync to ${targetPlayerName}: ${noteText}`);
            }
            else if (typeof window.sendChatMessage === 'function') {
                window.sendChatMessage(noteCommand);
                console.log(`üìù Sent note via sendChatMessage to ${targetPlayerName}: ${noteText}`);
            }
            else {
                console.error('‚ùå Chat send functions not available');
            }
        }

        // Note notification management
        let receivedNotes = [];
        
        function addReceivedNote(fromPlayer, noteText, timestamp) {
            console.log('üêõ addReceivedNote called:', fromPlayer, noteText, timestamp);
            const note = {
                from: fromPlayer,
                message: noteText,
                timestamp: timestamp || new Date().toISOString(),
                id: Date.now() + Math.random().toString(36).substr(2, 9)
            };
            
            receivedNotes.push(note);
            console.log('üêõ Note added to receivedNotes array. Total notes:', receivedNotes.length);
            updateNotificationIcon();
            updatePrivateMessagesPanel();
            
            // Auto-save received notes to character data
            if (typeof saveNotesToCharacterSilent === 'function') {
                saveNotesToCharacterSilent();
                console.log('üíæ Auto-saved received notes to character data');
            }
            
            // Show popup notification for received note
            if (typeof showNotification === 'function') {
                showNotification('notes', `üìù Note from ${fromPlayer}`, 
                    noteText.length > 50 ? noteText.substring(0, 50) + '...' : noteText, 
                    `Check the Notes panel to view all messages.`);
            }
            
            console.log(`üìù Received note from ${fromPlayer}: ${noteText}`);
        }

        function updatePrivateMessagesPanel() {
            const container = document.getElementById('private-messages-container');
            const countSpan = document.getElementById('private-messages-count');
            
            if (!container) return;
            
            if (receivedNotes.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: #8a8a8a; padding: 20px;">
                        <i class="material-icons" style="font-size: 2em; margin-bottom: 10px; display: block;">mail_outline</i>
                        No private messages yet! Send or receive private notes via player chip clicks.
                    </div>
                `;
                countSpan.style.display = 'none';
                return;
            }
            
            // Show count
            countSpan.textContent = `(${receivedNotes.length})`;
            countSpan.style.display = 'inline';
            countSpan.style.cssText += `
                background: #e74c3c;
                color: white;
                border-radius: 10px;
                padding: 2px 6px;
                font-size: 0.8em;
                margin-left: 8px;
            `;
            
            // Build messages HTML
            let messagesHTML = '';
            receivedNotes.forEach((note, index) => {
                const time = new Date(note.timestamp).toLocaleString();
                let messageContent = note.message;
                
                // Process image markup in notes
                if (messageContent && messageContent.includes('üñºÔ∏è [IMAGE:')) {
                    messageContent = messageContent.replace(/üñºÔ∏è \[IMAGE:(https?:\/\/[^\]]+)\]/g, (match, imageUrl) => {
                        return `<br><div style="text-align: center; margin: 12px 0;"><img src="${imageUrl}" style="max-width: 100%; max-height: 150px; border-radius: 6px; border: 1px solid #ddd; cursor: pointer;" onclick="if(window.chatImageSystem && window.chatImageSystem.openImageModal) { window.chatImageSystem.openImageModal('${imageUrl}', '${note.from}'); } else { window.open('${imageUrl}', '_blank'); }" title="Click to view full size"><br><small style="color: #666; font-style: italic;">Click image to view full size</small></div>`;
                    });
                }
                
                messagesHTML += `
                    <div style="border: 1px solid #e0e0e0; border-radius: 6px; padding: 12px; margin-bottom: 8px; background: #f9f9f9; position: relative;">
                        <button onclick="deleteNote('${note.id}')" style="
                            position: absolute;
                            top: 8px;
                            right: 8px;
                            background: #e74c3c;
                            color: white;
                            border: none;
                            border-radius: 50%;
                            width: 20px;
                            height: 20px;
                            cursor: pointer;
                            font-size: 12px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            opacity: 0.7;
                            transition: opacity 0.2s;
                        " onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0.7'" title="Delete note">√ó</button>
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 6px; padding-right: 25px;">
                            <strong style="color: #333; font-size: 0.9em;">From: ${note.from}</strong>
                            <small style="color: #666; font-size: 0.8em;">${time}</small>
                        </div>
                        <div style="color: #444; line-height: 1.3; font-size: 0.9em;">${messageContent}</div>
                    </div>
                `;
            });
            
            container.innerHTML = messagesHTML;
        }

        function deleteNote(noteId) {
            console.log('üóëÔ∏è Deleting note:', noteId);
            
            // Remove from array
            const index = receivedNotes.findIndex(note => note.id === noteId);
            if (index !== -1) {
                receivedNotes.splice(index, 1);
                console.log('üóëÔ∏è Note deleted. Remaining notes:', receivedNotes.length);
                
                // Update displays
                updateNotificationIcon();
                updatePrivateMessagesPanel();
                
                // Show confirmation
                if (typeof showNotification === 'function') {
                    showNotification('success', 'Note Deleted', 'Private message has been removed.', '');
                }
            } else {
                console.warn('üóëÔ∏è Note not found for deletion:', noteId);
            }
        }

        // Make deleteNote globally available
        window.deleteNote = deleteNote;

        function updateNotificationIcon() {
            const notificationBtn = document.getElementById('notes-notification');
            if (!notificationBtn) return;
            
            if (receivedNotes.length > 0) {
                notificationBtn.style.display = 'block';
                notificationBtn.title = `${receivedNotes.length} new note(s)`;
            } else {
                notificationBtn.style.display = 'none';
            }
        }

        function showNotesDropdown() {
            if (receivedNotes.length === 0) {
                alert('No notes received this session.');
                return;
            }
            
            // Create modal overlay
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.7);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            // Create modal content
            const modal = document.createElement('div');
            modal.style.cssText = `
                background: white;
                border-radius: 12px;
                padding: 24px;
                max-width: 500px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
                animation: noteModalSlideIn 0.3s ease-out;
            `;
            
            // Build notes HTML
            let notesHTML = `
                <div style="text-align: center; margin-bottom: 20px;">
                    <h3 style="margin: 0 0 8px 0; color: #333; font-size: 1.3em;">üìù Received Notes</h3>
                    <p style="margin: 0; color: #666; font-size: 0.9em;">${receivedNotes.length} note${receivedNotes.length !== 1 ? 's' : ''} this session</p>
                </div>
                <div id="notes-container">
            `;
            
            receivedNotes.forEach((note, index) => {
                const time = new Date(note.timestamp).toLocaleTimeString();
                let messageContent = note.message;
                
                // Process image markup in notes
                if (messageContent && messageContent.includes('üñºÔ∏è [IMAGE:')) {
                    messageContent = messageContent.replace(/üñºÔ∏è \[IMAGE:(https?:\/\/[^\]]+)\]/g, (match, imageUrl) => {
                        return `<br><div style="text-align: center; margin: 12px 0;"><img src="${imageUrl}" style="max-width: 100%; max-height: 200px; border-radius: 8px; border: 2px solid #e0e0e0; cursor: pointer;" onclick="window.open('${imageUrl}', '_blank')" title="Click to view full size"><br><small style="color: #666; font-style: italic;">Click image to view full size</small></div>`;
                    });
                }
                
                notesHTML += `
                    <div style="border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px; margin-bottom: 12px; background: #fafafa;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                            <strong style="color: #333;">From: ${note.from}</strong>
                            <small style="color: #666;">${time}</small>
                        </div>
                        <div style="color: #444; line-height: 1.4;">${messageContent}</div>
                    </div>
                `;
            });
            
            notesHTML += `
                </div>
                <div style="text-align: center; margin-top: 20px;">
                    <button id="close-notes-btn" style="
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; 
                        border: none; 
                        padding: 12px 24px; 
                        border-radius: 6px; 
                        cursor: pointer;
                        font-size: 14px;
                        transition: transform 0.2s, box-shadow 0.2s;
                        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
                    ">Close</button>
                </div>
            `;
            
            modal.innerHTML = notesHTML;
            overlay.appendChild(modal);
            document.body.appendChild(overlay);
            
            // Close modal function
            function closeModal() {
                document.body.removeChild(overlay);
            }
            
            // Event listeners
            document.getElementById('close-notes-btn').addEventListener('click', closeModal);
            
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) closeModal();
            });
            
            document.addEventListener('keydown', function escapeHandler(e) {
                if (e.key === 'Escape') {
                    closeModal();
                    document.removeEventListener('keydown', escapeHandler);
                }
            });
        }

        // Make note functions globally available
        window.addReceivedNote = addReceivedNote;
        window.showNotesDropdown = showNotesDropdown;

        // Modern modal-based note input for player chip clicks
        function showNoteInput(targetPlayerName) {
            console.log('üìù showNoteInput called for:', targetPlayerName);
            
            // Create modal overlay
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.7);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            // Create modal content
            const modal = document.createElement('div');
            modal.style.cssText = `
                background: white;
                border-radius: 12px;
                padding: 24px;
                max-width: 450px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
                animation: noteModalSlideIn 0.3s ease-out;
            `;
            
            // Add CSS animation
            if (!document.getElementById('note-modal-styles')) {
                const style = document.createElement('style');
                style.id = 'note-modal-styles';
                style.textContent = `
                    @keyframes noteModalSlideIn {
                        from { opacity: 0; transform: translateY(-20px) scale(0.95); }
                        to { opacity: 1; transform: translateY(0) scale(1); }
                    }
                    
                    /* Touch-friendly button sizing */
                    @media (hover: none) and (pointer: coarse) {
                        #note-cancel-btn, #note-send-btn, #note-image-btn {
                            padding: 14px 16px !important;
                            font-size: 16px !important;
                            min-height: 44px;
                            border-radius: 8px !important;
                        }
                        
                        #note-input-text {
                            padding: 16px !important;
                            font-size: 16px !important;
                            min-height: 120px !important;
                        }
                    }
                    
                    .image-preview {
                        position: relative;
                        display: inline-block;
                        margin: 8px 0;
                    }
                    
                    .image-preview img {
                        max-width: 100%;
                        max-height: 200px;
                        border-radius: 8px;
                        border: 2px solid #e0e0e0;
                    }
                    
                    .image-preview .remove-image {
                        position: absolute;
                        top: -8px;
                        right: -8px;
                        background: #e74c3c;
                        color: white;
                        border: none;
                        border-radius: 50%;
                        width: 24px;
                        height: 24px;
                        cursor: pointer;
                        font-size: 12px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }
                `;
                document.head.appendChild(style);
            }

            modal.innerHTML = `
                <div style="text-align: center; margin-bottom: 20px;">
                    <h3 style="margin: 0 0 8px 0; color: #333; font-size: 1.2em;">üìù Send Private Note</h3>
                    <p style="margin: 0; color: #666; font-size: 0.9em;">to <strong>${targetPlayerName}</strong></p>
                </div>
                
                <textarea 
                    id="note-input-text" 
                    placeholder="Type your private note here... (optional with image)"
                    style="width: 100%; height: 100px; padding: 12px; border: 2px solid #e0e0e0; 
                           border-radius: 8px; font-size: 14px; resize: vertical; outline: none;
                           font-family: inherit; box-sizing: border-box;"
                    maxlength="500"
                ></textarea>
                
                <div style="text-align: right; color: #999; font-size: 0.8em; margin: 8px 0;">
                    <span id="char-count">0</span>/500 characters
                </div>
                
                <!-- Image upload section -->
                <div id="image-section" style="margin: 16px 0; padding: 12px; background: #f8f9fa; border-radius: 8px;">
                    <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
                        <span style="font-size: 0.9em; color: #666;">üìé Attach Image (optional)</span>
                        <button id="note-image-btn" style="
                            background: #6c757d; 
                            color: white; 
                            border: none; 
                            padding: 6px 12px; 
                            border-radius: 4px; 
                            cursor: pointer;
                            font-size: 12px;
                            transition: background 0.2s;
                        ">Choose Image</button>
                    </div>
                    <input type="file" id="note-image-input" accept="image/*" style="display: none;">
                    <div id="image-preview-container"></div>
                </div>
                
                <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 20px;">
                    <button id="note-cancel-btn" style="
                        background: #f5f5f5; 
                        color: #666; 
                        border: none; 
                        padding: 10px 20px; 
                        border-radius: 6px; 
                        cursor: pointer;
                        font-size: 14px;
                        transition: background 0.2s;
                    ">Cancel</button>
                    
                    <button id="note-send-btn" style="
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        color: white; 
                        border: none; 
                        padding: 10px 20px; 
                        border-radius: 6px; 
                        cursor: pointer;
                        font-size: 14px;
                        transition: transform 0.2s, box-shadow 0.2s;
                        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
                    ">Send Note</button>
                </div>
            `;
            
            overlay.appendChild(modal);
            document.body.appendChild(overlay);
            
            // Get elements
            const textArea = document.getElementById('note-input-text');
            const charCount = document.getElementById('char-count');
            const cancelBtn = document.getElementById('note-cancel-btn');
            const sendBtn = document.getElementById('note-send-btn');
            const imageBtn = document.getElementById('note-image-btn');
            const imageInput = document.getElementById('note-image-input');
            const imagePreviewContainer = document.getElementById('image-preview-container');
            
            // State for selected image
            let selectedImage = null;
            
            // Focus textarea
            setTimeout(() => textArea.focus(), 100);
            
            // Character counter
            textArea.addEventListener('input', () => {
                const length = textArea.value.length;
                charCount.textContent = length;
                charCount.style.color = length > 450 ? '#e74c3c' : '#999';
            });
            
            // Image upload handling
            imageBtn.addEventListener('click', () => {
                imageInput.click();
            });
            
            imageInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    selectedImage = file;
                    showImagePreview(file);
                }
            });
            
            function showImagePreview(file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    imagePreviewContainer.innerHTML = `
                        <div class="image-preview">
                            <img src="${e.target.result}" alt="Preview">
                            <button class="remove-image" onclick="removeImage()">√ó</button>
                        </div>
                        <div style="font-size: 0.8em; color: #666; margin-top: 4px;">
                            üìé ${file.name} (${(file.size / 1024).toFixed(1)} KB)
                        </div>
                    `;
                };
                reader.readAsDataURL(file);
            }
            
            // Make removeImage globally accessible for the inline onclick
            window.removeImage = function() {
                selectedImage = null;
                imagePreviewContainer.innerHTML = '';
                imageInput.value = '';
            };
            
            // Button hover effects
            cancelBtn.addEventListener('mouseenter', () => {
                cancelBtn.style.background = '#e0e0e0';
            });
            cancelBtn.addEventListener('mouseleave', () => {
                cancelBtn.style.background = '#f5f5f5';
            });
            
            sendBtn.addEventListener('mouseenter', () => {
                sendBtn.style.transform = 'translateY(-1px)';
                sendBtn.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.4)';
            });
            sendBtn.addEventListener('mouseleave', () => {
                sendBtn.style.transform = 'translateY(0)';
                sendBtn.style.boxShadow = '0 2px 8px rgba(102, 126, 234, 0.3)';
            });
            
            imageBtn.addEventListener('mouseenter', () => {
                imageBtn.style.background = '#5a6268';
            });
            imageBtn.addEventListener('mouseleave', () => {
                imageBtn.style.background = '#6c757d';
            });
            
            // Close modal function
            function closeModal() {
                // Clean up global function
                if (window.removeImage) {
                    delete window.removeImage;
                }
                document.body.removeChild(overlay);
            }
            
            // Event listeners
            cancelBtn.addEventListener('click', closeModal);
            
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) closeModal();
            });
            
            document.addEventListener('keydown', function escapeHandler(e) {
                if (e.key === 'Escape') {
                    closeModal();
                    document.removeEventListener('keydown', escapeHandler);
                }
            });
            
            sendBtn.addEventListener('click', async () => {
                const noteText = textArea.value.trim();
                
                // Validate: must have either text or image
                if (!noteText && !selectedImage) {
                    textArea.style.borderColor = '#e74c3c';
                    textArea.focus();
                    setTimeout(() => {
                        textArea.style.borderColor = '#e0e0e0';
                    }, 2000);
                    return;
                }
                
                // Disable send button during upload
                sendBtn.disabled = true;
                sendBtn.style.opacity = '0.6';
                sendBtn.textContent = 'Sending...';
                
                try {
                    // Get current player name
                    const currentPlayerName = localStorage.getItem('playerName') || 'Anonymous';
                    
                    if (selectedImage) {
                        // Upload image with smart naming
                        console.log('üñºÔ∏è Uploading note image...');
                        const uploadResult = await window.multiImageHost.uploadNoteImage(
                            selectedImage, 
                            currentPlayerName, 
                            targetPlayerName
                        );
                        
                        if (uploadResult && uploadResult.url) {
                            // Send note with image (and optional text)
                            const imageCommand = `üñºÔ∏è [IMAGE:${uploadResult.url}]`;
                            const fullMessage = noteText ? `${noteText}\n\n${imageCommand}` : imageCommand;
                            
                            sendNoteCommand(targetPlayerName, fullMessage);
                            console.log('‚úÖ Private note with image sent successfully');
                        } else {
                            throw new Error('Image upload failed - no URL returned');
                        }
                    } else {
                        // Text-only note
                        sendNoteCommand(targetPlayerName, noteText);
                    }
                    
                    closeModal();
                    
                } catch (error) {
                    console.error('‚ùå Failed to send note:', error);
                    alert(`Failed to send note: ${error.message}`);
                    
                    // Re-enable send button
                    sendBtn.disabled = false;
                    sendBtn.style.opacity = '1';
                    sendBtn.textContent = 'Send Note';
                }
            });
            
            // Enter to send (Ctrl+Enter for new line)
            textArea.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.ctrlKey && !e.shiftKey) {
                    e.preventDefault();
                    sendBtn.click();
                }
            });
        }

        // Make showNoteInput globally available
        window.showNoteInput = showNoteInput;

        // Set up periodic player list updates
        function startPlayerListUpdates() {
            if (window.playerListInterval) {
                clearInterval(window.playerListInterval);
            }
            
            // Update player list every 30 seconds when connected
            window.playerListInterval = setInterval(() => {
                if (isNetworkConnected && typeof window.updateConnectedPlayersList === 'function') {
                    window.updateConnectedPlayersList();
                }
            }, 30000);
        }

        function stopPlayerListUpdates() {
            if (window.playerListInterval) {
                clearInterval(window.playerListInterval);
                window.playerListInterval = null;
            }
        }

        // Toggle Quick Tools section
        function toggleQuickTools() {
            const toolsContent = document.getElementById('tools-content');
            const chevron = document.getElementById('tools-chevron');
            
            toolsContent.classList.toggle('collapsed');
            chevron.classList.toggle('collapsed');
            
            if (toolsContent.classList.contains('collapsed')) {
                chevron.textContent = '‚ñ∂';
            } else {
                chevron.textContent = '‚ñº';
            }
        }

        // Send "user has joined" announcement with random effect and emoji
        async function sendJoinAnnouncement(playerName) {
            const joinEmojis = ['üéâ', '‚ú®', 'üåü', 'üéä', 'üî•', '‚ö°', 'üí´', 'üåà', 'üéØ', 'üöÄ'];
            const joinEffects = ['sparkle', 'glow', 'fire', 'lightning', 'divine', 'heal', 'throb', 'bounce'];
            const joinMessages = [
                'has joined the adventure!',
                'enters the realm!',
                'has arrived!',
                'joins the party!',
                'steps into the world!',
                'has connected!',
                'is ready for adventure!'
            ];
            
            // Pick random elements
            const randomEmoji = joinEmojis[Math.floor(Math.random() * joinEmojis.length)];
            const randomEffect = joinEffects[Math.floor(Math.random() * joinEffects.length)];
            const randomMessage = joinMessages[Math.floor(Math.random() * joinMessages.length)];
            
            // Create the announcement message with proper format: PlayerName: :effect: emoji message
            const announcement = `:${randomEffect}: ${randomEmoji} ${randomMessage}`;
            
            try {
                // Send via Supabase real-time system (like regular messages)
                if (typeof window.sendChatMessageAsync === 'function') {
                    await window.sendChatMessageAsync(announcement);
                    console.log('üéâ Join announcement sent:', announcement);
                } else if (typeof window.sendChatMessage === 'function') {
                    await window.sendChatMessage(announcement);
                    console.log('üéâ Join announcement sent:', announcement);
                } else {
                    console.warn('‚ö†Ô∏è Chat functions not available for join announcement');
                    // Fallback to local display
                    addChatMessage(announcement, 'system', 'System');
                }
            } catch (error) {
                console.error('‚ùå Failed to send join announcement:', error);
                // Fallback to local display
                addChatMessage(announcement, 'system', 'System');
            }
        }

        // Join game session - works exactly like player-test.html
        async function joinGameSession() {
            const connectionUrl = document.getElementById('session-code-input').value.trim();
            if (!connectionUrl) {
                alert('Please paste the connection URL from the storyteller');
                return;
            }

            // Use network player name if set, otherwise prompt
            let playerName = networkPlayerName;
            if (!playerName) {
                playerName = prompt('Enter your player name:');
                if (!playerName) return;
            }

            updateConnectionStatus('connecting', 'Connecting...');
            
            try {
                let processedUrl = connectionUrl;
                
                // Decode URL if it's in shortened format (exactly like player-test.html)
                if (window.supabaseUrlEncoder) {
                    processedUrl = window.supabaseUrlEncoder.ensureFullUrl(connectionUrl);
                    console.log('Processed connection URL:', processedUrl);
                }
                
                // Parse the Supabase URL: https://xxx.supabase.co?session=1234
                const urlParts = processedUrl.split('?');
                const supabaseUrl = urlParts[0];
                
                if (urlParts.length < 2) {
                    throw new Error('Invalid URL format. Expected: https://xxx.supabase.co?session=1234 or shortened format');
                }
                
                // Extract session code from URL parameters
                const params = new URLSearchParams(urlParts[1]);
                const sessionCode = params.get('session');
                
                if (!sessionCode) {
                    throw new Error('No session code found in URL. Make sure the URL includes ?session=YOUR_SESSION_CODE');
                }
                
                console.log(`üîó Extracted: Supabase URL=${supabaseUrl}, Session=${sessionCode}`);
                
                // Initialize Supabase with extracted URL and default API key
                const defaultApiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNrZGR2Ym14emVwcnZ4ZnNsaGxrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU5NTMxMjEsImV4cCI6MjA3MTUyOTEyMX0.b3mv50bCw5Yq5SrY8-Sagdl4WoC592nQNdfTQciuf0M';
                
                // Initialize Supabase connection
                if (typeof window.initializeSupabase === 'function') {
                    const initResult = window.initializeSupabase(supabaseUrl, defaultApiKey);
                    if (!initResult) {
                        throw new Error('Failed to initialize Supabase connection');
                    }
                } else {
                    throw new Error('Supabase initialization function not available');
                }
                
                console.log('üîå Attempting to join session:', sessionCode, 'as', playerName);
                
                // Join the session using the real Supabase system (exactly like player-test.html)
                if (typeof window.fullSupabaseConnect === 'function') {
                    const result = await window.fullSupabaseConnect(playerName, sessionCode, false, 'join');
                    
                    if (result.success) {
                        isNetworkConnected = true;
                        currentSessionCode = sessionCode;
                        
                        // Store the original connection URL for future reference
                        await saveConnectionUrl(connectionUrl);
                        
                        // Keep the original URL in the input field for easy reconnection
                        document.getElementById('session-code-input').value = connectionUrl;
                        
                        // Hide session connection area to give more room for chat
                        document.querySelector('.session-connection').style.display = 'none';
                        
                        // Show connection toggle button when connected
                        document.getElementById('connection-toggle').style.display = 'block';
                        
                        // Initialize Map Sync System after successful connection
                        try {
                            console.log('üó∫Ô∏è Initializing Map Sync System...');
                            if (window.MapSyncAdapter) {
                                const mapSyncAdapter = new MapSyncAdapter();
                                await mapSyncAdapter.initialize({
                                    supabaseClient: window.supabaseClient,
                                    sessionCode: sessionCode,
                                    playerName: playerName,
                                    isStoryteller: false,
                                    mapContainerId: 'map-viewer-container'
                                });
                                
                                // Store globally for access
                                window.mapSyncAdapter = mapSyncAdapter;
                                
                                // Enable keyboard movement
                                mapSyncAdapter.setupKeyboardMovement(true);
                                
                                // Set up event handlers for map reception
                                mapSyncAdapter.setEventHandlers(
                                    (mapData, record) => {
                                        console.log('üì• Map received, auto-displaying...');
                                        window.autoDisplayMaps();
                                    },
                                    null, // onMapShared (not needed for player)
                                    null, // onPlayerMoved 
                                    (type, error) => console.error('Map error:', type, error)
                                );
                                
                                console.log('‚úÖ Map synchronization ready!');
                            } else {
                                console.warn('‚ö†Ô∏è MapSyncAdapter not available');
                            }
                        } catch (mapError) {
                            console.warn('‚ö†Ô∏è Map sync initialization failed:', mapError);
                        }
                        
                        updateConnectionStatus('connected', `Connected as ${playerName}`);
                        
                        addChatMessage('system', 'Successfully connected to game session!');
                        
                        // Send "user has joined" message with random effect and emoji
                        sendJoinAnnouncement(playerName);
                        
                        // Update command center with player name
                        updateCommandCenterPlayerName();
                        
                        // Update connected players list
                        if (typeof window.updateConnectedPlayersList === 'function') {
                            setTimeout(() => {
                                window.updateConnectedPlayersList();
                            }, 2000); // Wait a bit for our join message to register
                        }
                        
                        // Start periodic player list updates
                        startPlayerListUpdates();
                        
                        document.getElementById('send-chat-btn').disabled = false;
                        
                        console.log('‚úÖ Successfully connected to session');
                    } else {
                        throw new Error(result.error || 'Failed to connect');
                    }
                } else {
                    throw new Error('fullSupabaseConnect function not available');
                }
                
            } catch (error) {
                console.error('‚ùå Connection failed:', error);
                
                // Reset connection state
                isNetworkConnected = false;
                currentSessionCode = null;
                
                updateConnectionStatus('disconnected', 'Connection failed');
                addChatMessage('system', `Connection failed: ${error.message}`);
                
                // Show session connection area again on connection failure
                const sessionConnection = document.querySelector('.session-connection');
                if (sessionConnection) {
                    sessionConnection.style.display = 'block';
                }
                
                // Make sure bottom sheet connection area is visible
                const sheetConnectionArea = document.getElementById('sheet-connection-area');
                if (sheetConnectionArea) {
                    sheetConnectionArea.style.display = 'block';
                }
                
                // Hide player chips in bottom sheet
                const playerChips = document.getElementById('player-chips-area');
                if (playerChips) {
                    playerChips.style.display = 'none';
                }
                
                // Sync connection status between main and sheet
                syncSheetConnectionStatus();
                
                // Hide connection toggle button when disconnected
                const connectionToggle = document.getElementById('connection-toggle');
                if (connectionToggle) {
                    connectionToggle.style.display = 'none';
                }
                
                // Stop player list updates
                stopPlayerListUpdates();
                
                console.log('üîÑ Connection areas reset for retry');
            }
        }

        // Send chat message - copied from player-test.html
        async function sendMessage() {
            const input = document.getElementById('chat-input');
            let message = input.value.trim();
            
            if (message && isNetworkConnected) {
                try {
                    // Send via Supabase real-time system - don't add locally (copied from player-test.html)
                    if (typeof window.sendChatMessageAsync === 'function') {
                        await window.sendChatMessageAsync(message);
                        console.log('‚úÖ Message sent via Supabase - waiting for echo');
                        input.value = '';
                    } else if (typeof window.sendChatMessage === 'function') {
                        await window.sendChatMessage(message);
                        console.log('‚úÖ Message sent via Supabase sync - waiting for echo');
                        input.value = '';
                    } else {
                        throw new Error('Supabase chat functions not available');
                    }
                } catch (error) {
                    console.error('‚ùå Failed to send message:', error);
                    addChatMessage('system', `‚ùå Failed to send: ${error.message}`);
                }
            }
        }

        // Handle enter key in chat input
        function handleChatKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        // Update connection status UI
        function updateConnectionStatus(status, text) {
            const dot = document.getElementById('connection-status-dot');
            const statusText = document.getElementById('connection-status-text');
            
            dot.className = `status-dot ${status}`;
            statusText.textContent = text;
            
            // Sync to bottom sheet status as well
            syncSheetConnectionStatus();
        }

        // Add message to chat - copied exactly from player-test.html
        function addChatMessage(message, type = 'player', sender = '') {
            // Handle null or undefined messages (like silent NOTE commands)
            if (!message) {
                console.log('üì° Null message filtered from chat display');
                return;
            }
            
            // Filter out heartbeat messages
            if (type === 'heartbeat' || sender === 'Heartbeat' || 
                (typeof message === 'object' && (message.message_type === 'heartbeat' || message.player_name === 'Heartbeat'))) {
                console.log('üì° Heartbeat filtered from display');
                return;
            }
            
            const chatMessages = document.getElementById('chat-messages');
            const messageEl = document.createElement('div');
            messageEl.className = `chat-message ${type}`;
            
            // Extract message text
            const messageText = typeof message === 'object' ? message.message_text : message;
            
            // Process message for emojis first
            let processedMessage = messageText;
            if (window.emojiProcessor) {
                processedMessage = window.emojiProcessor.processMessage(processedMessage);
                if (processedMessage !== messageText) {
                    console.log(`üé≠ Emoji converted: "${messageText}" ‚Üí "${processedMessage}"`);
                }
            }
            
            // Then process message for chat effects
            if (window.chatEffectsManager) {
                const effectResult = window.chatEffectsManager.processMessage(processedMessage);
                if (effectResult.hasEffects) {
                    processedMessage = effectResult.html;
                    console.log('üé® Applied chat effects to message:', effectResult.effects);
                }
            }
            
            let prefix = '';
            if (type === 'system') {
                prefix = '<strong>System:</strong> ';
            } else if (type === 'storyteller') {
                prefix = '<strong>Storyteller:</strong> ';
            } else if (type === 'player') {
                prefix = `<strong>${sender || networkPlayerName}:</strong> `;
            }
            
            messageEl.innerHTML = prefix + processedMessage;
            chatMessages.appendChild(messageEl);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Sync message to bottom sheet
            syncMessageToBottomSheet(prefix + processedMessage, type, sender);
            
            // Update FAB notification dot for new messages
            updateFABNotification();
            
            // Debounced reset for rapid message additions
            clearTimeout(window.chatResetTimeout);
            window.chatResetTimeout = setTimeout(() => {
                resetChatContainer();
            }, 500); // Reset after 500ms of no new messages
        }

        // Reset chat container dimensions after dynamic content changes
        function resetChatContainer() {
            const chatMessages = document.getElementById('chat-messages');
            if (chatMessages) {
                // Force recalculation of container dimensions
                chatMessages.style.height = '';
                chatMessages.style.minHeight = '';
                
                // Use requestAnimationFrame to ensure DOM updates are complete
                requestAnimationFrame(() => {
                    chatMessages.style.height = '100%';
                    chatMessages.style.minHeight = '0';
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                });
            }
        }

        // Placeholder for chat picker (can be enhanced later)
        function showChatPicker() {
            alert('Chat effects coming soon! For now, just type your message normally.');
        }

        // Hook into existing character save to potentially sync to network
        // This will be expanded in Phase 2 for character synchronization
        const originalSaveCharacter = window.saveCurrentCharacterToStorage;
        if (originalSaveCharacter) {
            window.saveCurrentCharacterToStorage = function() {
                const result = originalSaveCharacter.apply(this, arguments);
                
                // Future: Add character sync to network here
                if (isNetworkConnected && character) {
                    console.log('üîÑ Character saved locally, network sync pending...');
                    // TODO: Implement character sync in Phase 2
                }
                
                return result;
            };
        }
    </script>
    
    <!-- Image Upload Integration -->
    <script src="js/chatImageUploadIntegration.js"></script>

    <!-- Feral Gateway FAB - DCC-Themed Navigation -->
    <div class="feral-gateway-fab" id="feralGatewayFab">
        <div class="feral-gateway-main" onclick="toggleFeralGateway()">
            <i class="las la-dungeon dungeon-icon"></i>
        </div>
        <div class="feral-stack">
            <!-- Chat - First and primary function -->
            <div class="feral-option" onclick="openChatBottomSheet()" title="Game Chat">
                <i class="material-icons">chat_bubble</i>
            </div>
            <!-- Maps - Show current map -->
            <div class="feral-option" onclick="openMapsView()" title="Show Map">
                <i class="material-icons">map</i>
            </div>
            <!-- Character Stats -->
            <div class="feral-option" onclick="openCharacterTab()" title="Character Stats">
                <i class="ra ra-player"></i>
            </div>
            <!-- Inventory & Gear -->
            <div class="feral-option" onclick="openInventoryTab()" title="Inventory & Gear">
                <i class="ra ra-book"></i>
            </div>
            <!-- Magic & Spells -->
            <div class="feral-option" onclick="openMagicTab()" title="Magic & Spells">
                <i class="ra ra-fairy-wand"></i>
            </div>
            <!-- Notes & Backstory -->
            <div class="feral-option" onclick="openNotesTab()" title="Notes & Backstory">
                <i class="ra ra-scroll-unfurled"></i>
            </div>
            <!-- Storage Manager -->
            <div class="feral-option" onclick="openStorageTab()" title="Storage Manager">
                üóÑÔ∏è
            </div>
            <!-- Reference/Help -->
            <div class="feral-option" onclick="openReferenceTab()" title="How the Game Works">
                <i class="material-icons">help_outline</i>
            </div>
            <!-- Mini-Games Module -->
            <div class="feral-option" onclick="openMiniGamesModule()" title="Mini-Games">
                <i class="las la-gamepad"></i>
            </div>
            <!-- Themes & Colors -->
            <div class="feral-option" onclick="openThemesModule()" title="Themes & Colors">
                <i class="las la-palette"></i>
            </div>
        </div>
    </div>

    <!-- Mini-Games Constellation Overlay -->
    <div class="constellation-overlay" id="gamesConstellation">
        <div class="constellation-map">
            <div class="constellation-header">üåü Gaming Realms üåü</div>
            <button class="constellation-close" onclick="closeGamesConstellation()">‚úï</button>
            
            <!-- Available Games -->
            <div class="game-star iron-tangle" onclick="launchIronTangle()" title="üöÇ Iron Tangle Railway - Connect the tracks to reach your destination!">
                üöÇ
            </div>
            <div class="game-star donuts-magic-mania" onclick="launchDonutsMagicMania()" title="üç© Donut's Magic Mania - Princess Donut's sparkly match-3 game">
                üç©
            </div>
            <div class="game-star katias-training-room" onclick="launchKatiasTrainingRoom()" title="üéØ Katia's Training Room - Master doppelganger abilities and absorb your way to victory!">
                üéØ
            </div>
            
            <!-- Future Games (disabled for now) -->
            <div class="game-star future-game-1" title="üß© Coming Soon - More adventures await!">
                üß©
            </div>
        </div>
    </div>

    <!-- Themes Constellation Overlay -->
    <div class="themes-constellation" id="themesConstellation">
        <div class="themes-map">
            <div class="themes-header">üé® Color Realms üé®</div>
            <button class="themes-close" onclick="closeThemesConstellation()">‚úï</button>
            
            <div class="themes-grid">
                <!-- Row 1: Basic Themes -->
                <div class="theme-square theme-default" onclick="selectTheme('default')" title="Default Purple"></div>
                <div class="theme-square theme-red" onclick="selectTheme('red')" title="Red"></div>
                <div class="theme-square theme-orange" onclick="selectTheme('orange')" title="Orange"></div>
                <div class="theme-square theme-yellow" onclick="selectTheme('yellow')" title="Yellow"></div>
                
                <!-- Row 2: Cool Themes -->
                <div class="theme-square theme-green" onclick="selectTheme('green')" title="Green"></div>
                <div class="theme-square theme-blue" onclick="selectTheme('blue')" title="Blue"></div>
                <div class="theme-square theme-indigo" onclick="selectTheme('indigo')" title="Indigo"></div>
                <div class="theme-square theme-violet" onclick="selectTheme('violet')" title="Violet"></div>
                
                <!-- Row 3: Special Themes Part 1 -->
                <div class="theme-square theme-christmas" onclick="selectTheme('christmas')" title="Christmas"></div>
                <div class="theme-square theme-halloween" onclick="selectTheme('halloween')" title="Halloween"></div>
                <div class="theme-square theme-valentine" onclick="selectTheme('valentine')" title="Valentine's Day"></div>
                <div class="theme-square theme-ocean" onclick="selectTheme('ocean')" title="Ocean"></div>
                
                <!-- Row 4: Special Themes Part 2 -->
                <div class="theme-square theme-forest" onclick="selectTheme('forest')" title="Forest"></div>
                <div class="theme-square theme-sunset" onclick="selectTheme('sunset')" title="Sunset"></div>
            </div>
        </div>
    </div>

    <!-- Chat Bottom Sheet -->
    <div class="chat-bottom-sheet" id="chat-bottom-sheet">
        <div class="bottom-sheet-backdrop" onclick="closeChatBottomSheet()"></div>
        <div class="bottom-sheet-content">
            <!-- Drag Handle -->
            <div class="bottom-sheet-handle">
                <div class="handle-bar"></div>
            </div>
            
            <!-- Bottom Sheet Header -->
            <div class="bottom-sheet-header">
                <div class="sheet-tabs-container">
                    <div class="sheet-tabs">
                        <button class="sheet-tab active" onclick="switchChatTab('chat')" data-tab="chat">
                            <i class="material-icons">chat_bubble</i>
                            <span>Chat</span>
                        </button>
                        <button class="sheet-tab" onclick="switchChatTab('rolls')" data-tab="rolls">
                            <i class="ra ra-perspective-dice-six"></i>
                            <span>Rolls</span>
                        </button>
                    </div>
                    <div class="connection-status-mini">
                        <span class="status-dot" id="sheet-status-dot"></span>
                        <span class="status-text" id="sheet-status-text">Not connected</span>
                    </div>
                </div>
                <div class="sheet-controls">
                    <button class="sheet-control-btn" id="expand-sheet-btn" onclick="expandBottomSheet()" title="Expand to full screen">
                        <span class="material-icons">fullscreen</span>
                    </button>
                    <button class="sheet-control-btn" onclick="closeChatBottomSheet()" title="Close chat">
                        <span class="material-icons">close</span>
                    </button>
                </div>
            </div>

            <!-- Tab Content Areas -->
            <div class="sheet-tab-content">
                <!-- Chat Tab Content -->
                <div class="tab-panel active" id="chat-tab-panel">
                    <!-- Connection Controls (when not connected) -->
                    <div class="sheet-connection-area" id="sheet-connection-area">
                        <div class="connection-controls">
                            <input type="text" id="sheet-session-input" placeholder="Paste connection URL from storyteller">
                            <button class="sheet-join-btn" onclick="joinGameSessionFromSheet()">Join</button>
                        </div>
                    </div>

                    <!-- Player Chips (horizontal scroll) -->
                    <div class="player-chips-area" id="player-chips-area" style="display: none;">
                        <div class="player-chips-scroll">
                            <div class="player-chip self">
                                <div class="chip-avatar">üë§</div>
                                <span class="chip-name">You</span>
                            </div>
                            <!-- Dynamic player chips will be added here -->
                        </div>
                    </div>

                    <!-- Chat Messages -->
                    <div class="sheet-chat-messages" id="sheet-chat-messages">
                        <div class="chat-message system">
                            <span class="message-author">System:</span>
                            Welcome to DCC! Connect to a game session to start chatting.
                        </div>
                    </div>

                    <!-- Chat Input -->
                    <div class="sheet-chat-input">
                        <div class="chat-tools-row">
                            <button class="chat-tool-btn" onclick="showSheetChatEffects()" title="Chat Effects">
                                ‚ú®
                            </button>
                            <button class="chat-tool-btn" onclick="showSheetImageUpload()" title="Upload Image">
                                üì∑
                            </button>
                            <button class="chat-tool-btn" onclick="showSheetPlayers()" title="Your Notes">
                                üìù
                            </button>
                        </div>
                        <div class="input-row">
                            <input type="text" id="sheet-chat-input" placeholder="Type your message..." onkeypress="handleSheetChatKeyPress(event)">
                            <button class="sheet-send-btn" onclick="sendSheetMessage()" disabled>
                                <span class="material-icons">send</span>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Roll History Tab Content -->
                <div class="tab-panel" id="rolls-tab-panel">
                    <div class="roll-history-header">
                        <h4><i class="ra ra-perspective-dice-six"></i> Your Roll History</h4>
                        <button class="clear-rolls-btn" onclick="clearChatRollHistory()" title="Clear roll history">
                            <span class="material-icons">clear_all</span>
                            Clear
                        </button>
                    </div>
                    <div class="sheet-roll-history" id="sheet-roll-history">
                        <div style="text-align: center; color: #8a8a8a; padding: 40px;">
                            <i class="ra ra-perspective-dice-six" style="font-size: 3em; margin-bottom: 15px; display: block;"></i>
                            No rolls yet! Click attributes, skills, weapons, or spells to start rolling.
                        </div>
                    </div>
                </div>
        </div>
    </div>
</div>

<script>
// Initialize Chat Command Parser
document.addEventListener('DOMContentLoaded', () => {
    // Initialize the chat command parser for handling avatar URLs and other commands
    if (typeof ChatCommandParser !== 'undefined') {
        window.chatCommandParser = new ChatCommandParser();
        console.log('‚úÖ ChatCommandParser initialized');
    } else {
        console.warn('‚ö†Ô∏è ChatCommandParser class not found');
    }
    
    // Initialize command interceptor for chat message processing
    if (typeof initializeCommandInterceptor === 'function') {
        const interceptorInitialized = initializeCommandInterceptor();
        if (interceptorInitialized) {
            console.log('‚úÖ Command Interceptor initialized for V4-network');
        } else {
            console.warn('‚ö†Ô∏è Command Interceptor failed to initialize');
        }
    } else {
        console.warn('‚ö†Ô∏è initializeCommandInterceptor function not found');
    }
});

// Function to update self chip avatar manually (called when character changes)
function updateSelfChipAvatar() {
    const selfChip = document.querySelector('.player-chip.self');
    if (!selfChip) return;
    
    const currentPlayerName = window.networkPlayerName || 'You';
    const characterData = getCurrentCharacterData();
    
    if (characterData?.personal?.avatarUrl) {
        const avatarElement = selfChip.querySelector('.chip-avatar');
        if (avatarElement) {
            avatarElement.innerHTML = `<img src="${characterData.personal.avatarUrl}" alt="${currentPlayerName}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;" onerror="this.parentElement.innerHTML='üë§'">`;
            
            // Cache it for future use
            if (window.chatCommandParser && typeof window.chatCommandParser.handleAvatarUrlCommand === 'function') {
                window.chatCommandParser.handleAvatarUrlCommand(currentPlayerName, characterData.personal.avatarUrl, 'self');
            }
        }
        
        // Update name as well
        const nameElement = selfChip.querySelector('.chip-name');
        if (nameElement) {
            nameElement.textContent = currentPlayerName;
        }
    }
}

// Make it globally available
window.updateSelfChipAvatar = updateSelfChipAvatar;
</script>

</body>

</html>